import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const u=JSON.parse('{"title":"Styling with CSS","description":"","frontmatter":{},"headers":[],"relativePath":"styling-with-css/index.md","filePath":"styling-with-css/index.md","lastUpdated":1718989630000}'),o={name:"styling-with-css/index.md"},e=l(`<h1 id="styling-with-css" tabindex="-1">Styling with CSS <a class="header-anchor" href="#styling-with-css" aria-label="Permalink to &quot;Styling with CSS&quot;">​</a></h1><p>The restaurant website’s order confirmation widget is far from complete, but Madame Jellobutter insists that you make the widget less ugly before you do anything else. In previous chapters, we saw how to add styles using the <code>style</code> prop, but let’s see how to do it with good old CSS.</p><h2 id="add-the-first-css-file" tabindex="-1">Add the first CSS file <a class="header-anchor" href="#add-the-first-css-file" aria-label="Permalink to &quot;Add the first CSS file&quot;">​</a></h2><p>Add a new file <code>src/order-confirmation/order-item.css</code> and give it these styles:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.item</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border-top</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lightgray</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.emoji</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">font-size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">em</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.price</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">text-align</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">right</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.item</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border-top</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lightgray</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">.emoji</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">font-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">em</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">.price</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">text-align</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">right</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="import-using-mel-raw" tabindex="-1">Import using <code>mel.raw</code> <a class="header-anchor" href="#import-using-mel-raw" aria-label="Permalink to &quot;Import using \`mel.raw\`&quot;">​</a></h2><p>In OCaml, there is no syntax to import from files, because all modules within a project are visible to all other modules<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. However, we can make use of JavaScript’s <code>import</code> syntax by using the <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#generate-raw-javascript" target="_blank" rel="noreferrer">mel.raw extension node</a>, which allows us to embed raw JavaScript in our OCaml code. Add the following line to the top of <code>Order.re</code>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%%</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">raw</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{|</span><span style="color:#DBEDFF;">import &quot;./order-item.css&quot;</span><span style="color:#FDAEB7;">|}</span><span style="color:#E1E4E8;">]</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">%%</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">raw</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{|</span><span style="color:#032F62;">import &quot;./order-item.css&quot;</span><span style="color:#B31D28;">|}</span><span style="color:#24292E;">]</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The <code>{||}</code> string literal is known as a <a href="https://ocaml.org/manual/5.2/lex.html#sss:stringliterals" target="_blank" rel="noreferrer">quoted string literal</a>, and it is used to represent strings of arbitrary content without escaping<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>. They are similar to the <code>{js||js}</code> string literals we first saw in the <a href="/celsius-converter-exception/#solutions">Celsius Converter</a> chapter, with the difference that they won’t handle Unicode correctly.</p><p>Unfortunately, in the terminal where we’re running <code>npm run serve</code>, we see this Vite compilation error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">6:05:39 PM [vite] Pre-transform error:</span></span>
<span class="line"><span style="color:#e1e4e8;">Failed to load url /_build/default/src/styling-with-css/output/src/styling-with-css/order-item.module.css</span></span>
<span class="line"><span style="color:#e1e4e8;">(resolved id:</span></span>
<span class="line"><span style="color:#e1e4e8;">~/melange-for-react-devs/_build/default/src/styling-with-css/output/src/styling-with-css/order-item.module.css)</span></span>
<span class="line"><span style="color:#e1e4e8;">in</span></span>
<span class="line"><span style="color:#e1e4e8;">~/melange-for-react-devs/_build/default/src/styling-with-css/output/src/styling-with-css/Order.js.</span></span>
<span class="line"><span style="color:#e1e4e8;">Does the file exist?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">6:05:39 PM [vite] Pre-transform error:</span></span>
<span class="line"><span style="color:#24292e;">Failed to load url /_build/default/src/styling-with-css/output/src/styling-with-css/order-item.module.css</span></span>
<span class="line"><span style="color:#24292e;">(resolved id:</span></span>
<span class="line"><span style="color:#24292e;">~/melange-for-react-devs/_build/default/src/styling-with-css/output/src/styling-with-css/order-item.module.css)</span></span>
<span class="line"><span style="color:#24292e;">in</span></span>
<span class="line"><span style="color:#24292e;">~/melange-for-react-devs/_build/default/src/styling-with-css/output/src/styling-with-css/Order.js.</span></span>
<span class="line"><span style="color:#24292e;">Does the file exist?</span></span></code></pre></div><h2 id="tell-dune-to-copy-css-files" tabindex="-1">Tell Dune to copy CSS files <a class="header-anchor" href="#tell-dune-to-copy-css-files" aria-label="Permalink to &quot;Tell Dune to copy CSS files&quot;">​</a></h2><p>The problem is that Vite is serving the app from the build directory at <code>_build/default/src/order-confirmation/output/src/order-confirmation</code>, and the <code>order-item.css</code> file isn’t in that build directory.</p><p>To solve this, we can add the <a href="https://melange.re/v4.0.0/build-system.html#handling-assets" target="_blank" rel="noreferrer">runtime_deps field</a> to our <code>melange.emit</code> stanza in <code>src/order-confirmation/dune</code>:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">melange.emit</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">target</span><span style="color:#E1E4E8;"> output)</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">libraries</span><span style="color:#E1E4E8;"> reason-react)</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">preprocess</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">pps</span><span style="color:#E1E4E8;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">module_systems</span><span style="color:#E1E4E8;"> es6)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">runtime_deps</span><span style="color:#E1E4E8;"> order-item.css))</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">melange.emit</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">target</span><span style="color:#24292E;"> output)</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">libraries</span><span style="color:#24292E;"> reason-react)</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">preprocess</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">pps</span><span style="color:#24292E;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">module_systems</span><span style="color:#24292E;"> es6)</span></span>
<span class="line highlighted"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">runtime_deps</span><span style="color:#24292E;"> order-item.css))</span></span></code></pre></div><p>We also want to add styles for the <code>Order</code> component, so add a new file <code>src/order-confirmation/order.css</code> with these styles:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">table</span><span style="color:#B392F0;">.order</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border-collapse</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">collapse</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">table</span><span style="color:#B392F0;">.order</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">em</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.total</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border-top</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gray</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">font-weight</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">bold</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">text-align</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">right</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">table</span><span style="color:#6F42C1;">.order</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border-collapse</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">collapse</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">table</span><span style="color:#6F42C1;">.order</span><span style="color:#24292E;"> </span><span style="color:#22863A;">td</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.5</span><span style="color:#D73A49;">em</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">.total</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border-top</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">gray</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">font-weight</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">bold</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">text-align</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">right</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>To ensure that <code>order.css</code> is also copied to the build directory, we can add <code>order.css</code> to the value of <code>runtime_deps</code>:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(runtime_deps order-item.css order.css)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(runtime_deps order-item.css order.css)</span></span></code></pre></div><p>If you have many <code>.css</code> files, you can tell <code>runtime_deps</code> to copy all <code>.css</code> files over using Dune’s <code>glob_files</code> configuration:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(runtime_deps (glob_files *.css))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(runtime_deps (glob_files *.css))</span></span></code></pre></div><p>Check the Dune documentation for the <a href="https://dune.readthedocs.io/en/stable/concepts/dependency-spec.html#glob" target="_blank" rel="noreferrer">different options for globs</a>.</p><h2 id="add-classes-to-jsx" tabindex="-1">Add classes to JSX <a class="header-anchor" href="#add-classes-to-jsx" aria-label="Permalink to &quot;Add classes to JSX&quot;">​</a></h2><p>Now we can add the appropriate classes to <code>OrderItem.make</code>’s JSX:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~item</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;">&quot;item&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;">&quot;emoji&quot;</span><span style="color:#E1E4E8;">&gt; {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toEmoji </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;">&quot;price&quot;</span><span style="color:#E1E4E8;">&gt; {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~item</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;item&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;emoji&quot;</span><span style="color:#24292E;">&gt; {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toEmoji </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;">&gt; {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>As well as <code>Order.make</code>’s JSX:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">reduce(~init</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(acc</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> order) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         acc </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(order)</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;">&quot;order&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {items</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">mapi(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(item</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> index) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#DBEDFF;">&quot;item-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> string_of_int(index)} </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          )</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;">&quot;total&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Total&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {total </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">reduce(~init</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(acc</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> order) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         acc </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(order)</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">table</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;order&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {items</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">mapi(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(item</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> index) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;item-&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> string_of_int(index)} </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">          )</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array}</span></span>
<span class="line highlighted"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;total&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Total&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {total </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Finally, add a <code>mel.raw</code> extension node at the top of <code>Order.re</code>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%%</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">raw</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{|</span><span style="color:#DBEDFF;">import &quot;./order.css&quot;</span><span style="color:#FDAEB7;">|}</span><span style="color:#E1E4E8;">]</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">%%</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">raw</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{|</span><span style="color:#032F62;">import &quot;./order.css&quot;</span><span style="color:#B31D28;">|}</span><span style="color:#24292E;">]</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="problems-with-mel-raw" tabindex="-1">Problems with <code>mel.raw</code> <a class="header-anchor" href="#problems-with-mel-raw" aria-label="Permalink to &quot;Problems with \`mel.raw\`&quot;">​</a></h2><p>This solution works well for our current build configuration, but falls apart if we change the <code>module_systems</code> field of the <code>melange.emit</code> stanza from <code>es6</code> to <code>commonjs</code>. This results in a subtle runtime error caused by CommonJS needing <code>require</code> instead of <code>import</code> to import modules.</p><p>The <code>mel.raw</code> extension node is unsafe, but it is still useful for prototyping. Fortunately, Melange provides a more reliable way to import frontend assets.</p><h2 id="import-using-external" tabindex="-1">Import using <code>external</code> <a class="header-anchor" href="#import-using-external" aria-label="Permalink to &quot;Import using \`external\`&quot;">​</a></h2><p>At the top of <code>Order.re</code>, replace our first <code>mel.raw</code> extension node with an <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#external-functions" target="_blank" rel="noreferrer">external</a> declaration:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line diff remove"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%%</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">raw</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{|</span><span style="color:#DBEDFF;">import &quot;./order-item.css&quot;</span><span style="color:#FDAEB7;">|}</span><span style="color:#E1E4E8;">]</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;./order-item.css&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">external</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_css</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">unit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;default&quot;</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line diff remove"><span style="color:#24292E;">[</span><span style="color:#D73A49;">%%</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">raw</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{|</span><span style="color:#032F62;">import &quot;./order-item.css&quot;</span><span style="color:#B31D28;">|}</span><span style="color:#24292E;">]</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line diff add"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order-item.css&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">external</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_css</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span></code></pre></div><p>This essentially tells OCaml to assign the default export of the <code>order-item.css</code> module to the variable <code>_css</code>. The generated JavaScript looks like this:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> OrderItemCss </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./order-item.css&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _css;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> OrderItemCss </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order-item.css&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _css;</span></span></code></pre></div><p>Let’s break down the individual parts of the <code>external</code> declaration:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;./order-item.css&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">external</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_css</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">unit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;default&quot;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order-item.css&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">external</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_css</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#B31D28;">;</span></span></code></pre></div><ul><li><a href="https://melange.re/v4.0.0/communicate-with-javascript.html#using-functions-from-other-javascript-modules" target="_blank" rel="noreferrer">mel.module</a> is an <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#attributes" target="_blank" rel="noreferrer">attribute</a> that tells the <code>external</code> declaration which module to import from</li><li>The <code>external</code> keyword tells OCaml this is a declaration for a value defined outside of OCaml, i.e. it comes from JavaScript<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li><li><code>_css: unit</code> means the object we get back from the import is named <code>_css</code> and has type <code>unit</code>. We put an underscore in front of the name because we don’t intend to use this variable. Likewise, we give it a type of <a href="https://reasonml.github.io/docs/en/overview#unit" target="_blank" rel="noreferrer">unit</a> because it doesn’t have a meaningful value.</li><li>The <code>&quot;default&quot;</code> at the end tells OCaml to import the default export of the module.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>A quick way to check what an <code>external</code> declaration compiles to is to use the <a href="https://melange.re/v4.0.0/playground/" target="_blank" rel="noreferrer">Melange Playground</a>. For example, here’s a <a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=W0BtZWwubW9kdWxlICIuL29yZGVyLWl0ZW0uY3NzIl0gZXh0ZXJuYWwgX2NzczogdW5pdCA9ICJkZWZhdWx0Ijs%3D&amp;live=off" target="_blank" rel="noreferrer">link</a> to the <code>external</code> declaration we just added.</p></div><h2 id="use-css-modules" tabindex="-1">Use CSS modules <a class="header-anchor" href="#use-css-modules" aria-label="Permalink to &quot;Use CSS modules&quot;">​</a></h2><p>Right now, the classes defined in the CSS files we’re importing are in the global scope. For non-trivial projects, it’s better to use <a href="https://css-tricks.com/css-modules-part-1-need/" target="_blank" rel="noreferrer">CSS modules</a>, which give us access to locally-scoped classes<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>.</p><p>First, rename <code>order-item.css</code> to <code>order-item.module.css</code>, which turns it into a CSS module. Then change the corresponding <code>external</code> declaration:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line diff remove"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;./order-item.css&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">external</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_css</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">unit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;default&quot;</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;./order-item.module.css&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">external</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">css</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">({..}) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;default&quot;</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line diff remove"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order-item.css&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">external</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_css</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line diff add"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order-item.module.css&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">external</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">css</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">({..}) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span></code></pre></div><p>There are three changes of note:</p><ul><li>We change the payload of the <code>mel.module</code> attribute to <code>./order-item.module.css</code> to reflect the new name of the file</li><li>We rename the <code>_css</code> variable to <code>css</code>, since we intend to use the variable later</li><li>We change the type of <code>css</code> from <code>unit</code> to <code>Js.t({..})</code><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></li></ul><p>If you look at your compiled app in the browser right now, you’ll see that this change breaks the styles, because the classes defined in <code>order-item.module.css</code> can no longer be accessed by the names we originally gave them. To access the locally-scoped classes, we must refactor the <code>OrderItem</code> component so that it accesses the class names through the <code>css</code> variable:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;./order-item.module.css&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">external</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">css</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">({..}) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;default&quot;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~item</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">css##</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">css##</span><span style="color:#B392F0;">emoji</span><span style="color:#E1E4E8;">&gt; {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toEmoji </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">css##</span><span style="color:#B392F0;">price</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order-item.module.css&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">external</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">css</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">({..}) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~item</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">css##</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">css##</span><span style="color:#6F42C1;">emoji</span><span style="color:#24292E;">&gt; {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toEmoji </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">css##</span><span style="color:#6F42C1;">price</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Recall that <code>##</code> is the access operator for <code>Js.t</code> objects, so <code>className=css##item</code> is equivalent to <code>className={css.item}</code> in JavaScript. Note that we also moved the <code>external</code> declaration for <code>./order-item.module.css</code> inside the <code>OrderComponent</code> module, since that’s the only place it’s used.</p><p>We have not seen the last of <code>external</code> declarations, as they are the primary way in which OCaml interacts with code written in JavaScript. See the <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#external-functions" target="_blank" rel="noreferrer">Melange docs</a> for more details.</p><h2 id="class-names-must-be-the-same" tabindex="-1">Class names must be the same <a class="header-anchor" href="#class-names-must-be-the-same" aria-label="Permalink to &quot;Class names must be the same&quot;">​</a></h2><p>The class names you use in <code>.css</code> files must be the same as the ones you use in your <code>.re</code> files. Try changing <code>css##emoji</code> in the <code>OrderItem</code> component to <code>css##emojis</code>.</p><p>What happens is that the styling for emojis silently breaks. This is the weakness of the CSS module approach, which requires that you manually keep all class names in sync. In a <a href="/todo.html">future chapter</a>, we’ll introduce a type-safe approach to styling that doesn’t have this problem.</p><hr><p>Excelsior! Madame Jellobutter likes how the order confirmation widget looks so far. But she plans to add more options for her current menu items, for example she’d like to have more than one type of sandwich. We’ll tackle that in the next chapter.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>The <code>mel.raw</code> extension node embeds raw JavaScript inside OCaml code <ul><li>It isn’t type-safe and you can usually use <code>external</code> instead</li></ul></li><li>The <code>runtime_deps</code> field of <code>melange.emit</code> copies assets like <code>.css</code> files to the build directory <ul><li>The <code>glob_files</code> term can be used to copy all files of a certain type</li></ul></li><li><code>external</code> declarations are used to import CSS or JS files <ul><li>The <code>mel.module</code> attribute is used to specify which module or file to import</li></ul></li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> Extension nodes like <code>mel.raw</code> can also be prefixed with <code>%</code> instead of <code>%%</code>. What happens if you replace <code>%%mel.raw</code> with <code>%mel.raw</code>?</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line diff remove"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%%</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">raw</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{|</span><span style="color:#DBEDFF;">import &quot;./order-item.css&quot;</span><span style="color:#FDAEB7;">|}</span><span style="color:#E1E4E8;">]</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">raw</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{|</span><span style="color:#DBEDFF;">import &quot;./order-item.css&quot;</span><span style="color:#FDAEB7;">|}</span><span style="color:#E1E4E8;">]</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line diff remove"><span style="color:#24292E;">[</span><span style="color:#D73A49;">%%</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">raw</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{|</span><span style="color:#032F62;">import &quot;./order-item.css&quot;</span><span style="color:#B31D28;">|}</span><span style="color:#24292E;">]</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line diff add"><span style="color:#24292E;">[</span><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">raw</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{|</span><span style="color:#032F62;">import &quot;./order-item.css&quot;</span><span style="color:#B31D28;">|}</span><span style="color:#24292E;">]</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span></code></pre></div><details class="details custom-block"><summary>Solution</summary><p>Changing <code>%%mel.raw</code> to <code>%mel.raw</code> will cause a compilation error in Vite because the generated JS code changes to</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">((import </span><span style="color:#9ECBFF;">&quot;./order.css&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">((import </span><span style="color:#032F62;">&quot;./order.css&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>which isn’t valid JavaScript syntax. Changing it back to <code>%%mel.raw</code> will produce syntactically valid JS:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./order.css&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order.css&quot;</span></span>
<span class="line"><span style="color:#24292E;">;</span></span></code></pre></div><p>The general rule is that you should use <code>%%mel.raw</code> for statements, and <code>%mel.raw</code> for expressions.</p></details><p><b>2.</b> Refactor the <code>Order</code> component so that it also uses an <code>external</code> declaration instead of <code>mel.raw</code>.</p><details class="details custom-block"><summary>Solution</summary><p><code>Order</code> component using <code>external</code> declaration:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">mel</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;./order.module.css&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">external</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">css</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">({..}) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;default&quot;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">reduce(~init</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(acc</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> order) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         acc </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(order)</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">css##</span><span style="color:#B392F0;">order</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {items</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">mapi(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(item</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> index) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#DBEDFF;">&quot;item-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> string_of_int(index)} </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          )</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">css##</span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Total&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {total </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">mel</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./order.module.css&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">external</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">css</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">({..}) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">reduce(~init</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(acc</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> order) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         acc </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(order)</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">table</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">css##</span><span style="color:#6F42C1;">order</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {items</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">mapi(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(item</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> index) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;item-&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> string_of_int(index)} </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">          )</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">css##</span><span style="color:#6F42C1;">total</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Total&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {total </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div></details><p><b>3.</b> Replace your usage of <code>mel.module</code> with <code>bs.module</code>. What happens?</p><details class="details custom-block"><summary>Solution</summary><p>If you replace <code>mel.module</code> with <code>bs.module</code>, your code will fail to compile with this error message:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File &quot;src/styling-with-css/Order.re&quot;, line 4, characters 4-13:</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: \`[@bs.*]&#39; and non-namespaced attributes have been removed in favor of \`[@mel.*]&#39; attributes.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File &quot;src/styling-with-css/Order.re&quot;, line 4, characters 4-13:</span></span>
<span class="line"><span style="color:#24292e;">Error: \`[@bs.*]&#39; and non-namespaced attributes have been removed in favor of \`[@mel.*]&#39; attributes.</span></span></code></pre></div><p>Basically, <code>bs.module</code> was the old name for the attribute, but it has been replaced by <code>mel.module</code>. This is worth mentioning because there’s still a decent amount of code out in the wild that uses <code>bs.module</code>.</p></details><hr><p>View <a href="https://github.com/melange-re/melange-for-react-devs/blob/main/src/styling-with-css/" target="_blank" rel="noreferrer">source code</a> and <a href="https://react-book.melange.re/demo/src/styling-with-css/" target="_blank" rel="noreferrer">demo</a> for this chapter.</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Recall that in the <code>Index</code> modules you’ve written so far, you’ve never had to import any of the components you used that were defined in other files. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Quoted string literals are similar to <a href="https://ioflood.com/blog/python-multiline-string/" target="_blank" rel="noreferrer">multiline string literals in Python</a>. Inside a quoted string literal, you don’t need to escape double quote or newline characters. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>In native OCaml, <code>external</code> refers to functions and variables that come from C. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>The “local scoping” of CSS modules isn’t quite like scoping in a programming language. Instead, class names defined in a <code>.module.css</code> file are obfuscated so that only OCaml/JS modules that import them directly can use them. <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><code> Js.t({..})</code> is the type signature for a <code>Js.t</code> object, which we <a href="/celsius-converter-exception/#js-t-object">first encountered</a> in the Celsius Converter chapter. <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>`,71),p=[e];function t(c,r,y,E,i,d){return a(),n("div",null,p)}const m=s(o,[["render",t]]);export{u as __pageData,m as default};
