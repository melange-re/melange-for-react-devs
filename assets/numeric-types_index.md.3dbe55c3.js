import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const D=JSON.parse('{"title":"Numeric Types","description":"","frontmatter":{},"headers":[],"relativePath":"numeric-types/index.md","filePath":"numeric-types/index.md","lastUpdated":1716395778000}'),o={name:"numeric-types/index.md"},p=l(`<h1 id="numeric-types" tabindex="-1">Numeric Types <a class="header-anchor" href="#numeric-types" aria-label="Permalink to &quot;Numeric Types&quot;">​</a></h1><p>OCaml’s numeric types work differently than in JavaScript. The first thing you might notice is that OCaml makes a clear and hard distinction between integer and float types. For example:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// int</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(foo)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(bar)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">;</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// int</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(foo)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(bar)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Note that you didn’t have to write the types yourself, OCaml is able to infer the types from the literals. This would also work:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(foo)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(bar)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(foo)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(bar)</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="melange-playground" tabindex="-1">Melange Playground <a class="header-anchor" href="#melange-playground" aria-label="Permalink to &quot;Melange Playground&quot;">​</a></h2><p><a href="https://melange.re/v4.0.0/playground/" target="_blank" rel="noreferrer">Melange Playground</a> is an interactive environment for running OCaml code and seeing its output. Paste this into the source code editor on the left side:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(foo)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(bar)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(foo)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(bar)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>In the bottom right panel, you can see the console output, which should be:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">42</span></span>
<span class="line"><span style="color:#e1e4e8;">42.1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">42</span></span>
<span class="line"><span style="color:#24292e;">42.1</span></span></code></pre></div><p>In the top right panel, you can see the JavaScript generated by the Melange compiler:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// Generated by Melange</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(42);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(42.1);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">var foo = 42;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">var bar = 42.1;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">export {</span></span>
<span class="line"><span style="color:#e1e4e8;">  foo ,</span></span>
<span class="line"><span style="color:#e1e4e8;">  bar ,</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;">/*  Not a pure module */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// Generated by Melange</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">console.log(42);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">console.log(42.1);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">var foo = 42;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">var bar = 42.1;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export {</span></span>
<span class="line"><span style="color:#24292e;">  foo ,</span></span>
<span class="line"><span style="color:#24292e;">  bar ,</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">/*  Not a pure module */</span></span></code></pre></div><p>Note that the <code>console.log</code> invocations are given constants instead of the variables. That’s a nifty optimization done by Melange.</p><p>Another sweet feature is that you can hover over the variables and see their types. Try it out, and you’ll see that <code>foo</code> has type <code>int</code> while <code>bar</code> has type <code>float</code>.</p><p>The Problems pane in the bottom left corner shows error mesages when appropriate. At the moment, it shows <code>No problems</code>. Try type-annotating <code>bar</code> with <code>int</code> and see what happens:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// int</span></span>
<span class="line highlighted"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(foo)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(bar)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// int</span></span>
<span class="line highlighted"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(foo)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(bar)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The Problems pane should now show something like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Line 2, 15:</span></span>
<span class="line"><span style="color:#e1e4e8;">  Error This expression has type float but an expression was expected of type int</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Line 2, 15:</span></span>
<span class="line"><span style="color:#24292e;">  Error This expression has type float but an expression was expected of type int</span></span></code></pre></div><h2 id="sharing-code-snippets" tabindex="-1">Sharing code snippets <a class="header-anchor" href="#sharing-code-snippets" aria-label="Permalink to &quot;Sharing code snippets&quot;">​</a></h2><p>Melange Playground is also an excellent way to share OCaml code snippets with your friends! As you type in the source editor, it will store your code in the <code>code</code> query string parameter of the URL. For example, here’s a link to the snippet we started with:</p><p><a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=bGV0IGZvbyA9IDQyOwpsZXQgYmFyID0gNDIuMTsKSnMubG9nKGZvbyk7CkpzLmxvZyhiYXIpOw%3D%3D&amp;live=off" target="_blank" rel="noreferrer
noopener">https://melange.re/v4.0.0/playground/?language=Reason&amp;code=bGV0IGZvbyA9IDQyOwpsZXQgYmFyID0gNDIuMTsKSnMubG9nKGZvbyk7CkpzLmxvZyhiYXIpOw%3D%3D&amp;live=off</a></p><h2 id="comparison-operators" tabindex="-1">Comparison operators <a class="header-anchor" href="#comparison-operators" aria-label="Permalink to &quot;Comparison operators&quot;">​</a></h2><p>In Melange Playground, change your program to this:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// int</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(foo </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> bar)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">;</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// int</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(foo </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> bar)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>You’ll get a compiler error for the last line that says</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">This expression has type float but an expression was expected of type int</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">This expression has type float but an expression was expected of type int</span></span></code></pre></div><p>Unlike JavaScript, there are no implicit conversions in OCaml. Therefore you cannot expect to compare an integer and a float together, unless you convert one of the values so that both values have the same type. To make the last line compile, you can change it to:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(foo </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">of_float(bar))</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(foo </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">of_float(bar))</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Another way to fix the last line is to convert <code>foo</code> from an int to a float:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">of_int(foo) </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> bar)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">of_int(foo) </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> bar)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The same-type restriction applies to all the comparison operators:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">44</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">66</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">44</span><span style="color:#B31D28;">.</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">66</span><span style="color:#B31D28;">.</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="arithmetic-operators" tabindex="-1">Arithmetic operators <a class="header-anchor" href="#arithmetic-operators" aria-label="Permalink to &quot;Arithmetic operators&quot;">​</a></h2><p>What about addition? From what you’ve already seen, you can probably guess that <code>Js.log(42 + 16.0)</code> won’t compile. However, you may be surprised to discover that <code>Js.log(42.0 + 16.0)</code> also won’t compile! That’s because OCaml uses separate arithmetic operators for floats. What will compile is this:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// prints 58</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// prints 58</span></span></code></pre></div><p>Here are examples of the other arithmetic operators, try them out in the playground:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">66</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">-.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">66</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">*.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">66</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">/.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">66</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">-.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">66</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">*.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">66</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">/.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Notice that all float arithmetic operators end with <code>.</code> (period), just like float literals.</p><h2 id="they-re-just-number" tabindex="-1">They’re just <code>Number</code> <a class="header-anchor" href="#they-re-just-number" aria-label="Permalink to &quot;They&#39;re just \`Number\`&quot;">​</a></h2><p>Underneath the covers, <code>foo</code> and <code>bar</code> are both instances of JavaScript’s <code>Number</code> type:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// int</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">typeof(foo))</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// prints &quot;number&quot;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">typeof(bar))</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// prints &quot;number&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">;</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// int</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// float</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">typeof(foo))</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// prints &quot;number&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">typeof(bar))</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// prints &quot;number&quot;</span></span></code></pre></div><p>Refer to the <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#data-types-and-runtime-representation" target="_blank" rel="noreferrer">Melange docs</a> for a complete rundown of how OCaml types get translated to JavaScript types.</p><h2 id="widgets-in-the-playground" tabindex="-1">Widgets in the Playground <a class="header-anchor" href="#widgets-in-the-playground" aria-label="Permalink to &quot;Widgets in the Playground&quot;">​</a></h2><p>Melange Playground can also render ReasonReact components! Click the <strong>Live</strong> button next to the <strong>JavaScript output</strong> button. Now paste in the code to render the Counter component from the previous chapter:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">counter</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setCounter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">useState(</span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Style</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">make(</span></span>
<span class="line"><span style="color:#E1E4E8;">        ~padding</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ~display</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;flex&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ~gridGap</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">()</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      )}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; {counter </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">to_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">querySelector(</span><span style="color:#DBEDFF;">&quot;#preview&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#DBEDFF;">&quot;Failed to start React: couldn&#39;t find the #preview element&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">createRoot(root)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">render(root</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> /&gt;)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">counter</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">setCounter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">useState(</span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Style</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">make(</span></span>
<span class="line"><span style="color:#24292E;">        ~padding</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">        ~display</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;flex&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">        ~gridGap</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">()</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      )}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; {counter </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">to_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">querySelector(</span><span style="color:#032F62;">&quot;#preview&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#032F62;">&quot;Failed to start React: couldn&#39;t find the #preview element&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">createRoot(root)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">render(root</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> /&gt;)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Note that we explicitly defined a module for the Counter component this time because we can’t use multiple files in Melange Playground.</p><p>Let’s make the counter look a little more impressive. Add a new module called <code>Styles</code> which contains all the styles we want to use:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Styles</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // Alias the function to save on keystrokes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Style</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">make</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    make(</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~fontSize</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;2em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~padding</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~display</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;flex&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~gridGap</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~alignItems</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;center&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">()</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    make(</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~fontSize</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~border</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1px solid white&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~borderRadius</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;0.5em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~padding</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;0.5em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">()</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> make(~minWidth</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;2em&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> ~textAlign</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;center&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Styles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // Alias the function to save on keystrokes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Style</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">make</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    make(</span></span>
<span class="line"><span style="color:#24292E;">      ~fontSize</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;2em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~padding</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~display</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;flex&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~gridGap</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~alignItems</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;center&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">()</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">button</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    make(</span></span>
<span class="line"><span style="color:#24292E;">      ~fontSize</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~border</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1px solid white&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~borderRadius</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;0.5em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~padding</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;0.5em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">()</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> make(~minWidth</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;2em&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> ~textAlign</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;center&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>And then update the JSX in our <code>make</code> function to use the style objects in <code>Styles</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line highlighted"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Styles</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Styles</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Styles</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">number</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {counter </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">to_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Styles</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line highlighted"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Styles</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">root</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Styles</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Styles</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">number</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {counter </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">to_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Styles</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Here’s the <a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=bW9kdWxlIFN0eWxlcyA9IHsKICBsZXQgbWFrZSA9IFJlYWN0RE9NLlN0eWxlLm1ha2U7CgogIGxldCByb290ID0KICAgIG1ha2UoCiAgICAgIH5mb250U2l6ZT0iMmVtIiwKICAgICAgfnBhZGRpbmc9IjFlbSIsCiAgICAgIH5kaXNwbGF5PSJmbGV4IiwKICAgICAgfmdyaWRHYXA9IjFlbSIsCiAgICAgIH5hbGlnbkl0ZW1zPSJjZW50ZXIiLAogICAgICAoKSwKICAgICk7CgogIGxldCBidXR0b24gPQogICAgbWFrZSgKICAgICAgfmZvbnRTaXplPSIxZW0iLAogICAgICB%2BYm9yZGVyPSIxcHggc29saWQgd2hpdGUiLAogICAgICB%2BYm9yZGVyUmFkaXVzPSIwLjVlbSIsCiAgICAgIH5wYWRkaW5nPSIwLjVlbSIsCiAgICAgICgpLAogICAgKTsKCiAgbGV0IG51bWJlciA9IG1ha2Uofm1pbldpZHRoPSIyZW0iLCB%2BdGV4dEFsaWduPSJjZW50ZXIiLCAoKSk7Cn07Cgptb2R1bGUgQ291bnRlciA9IHsKICBbQHJlYWN0LmNvbXBvbmVudF0KICBsZXQgbWFrZSA9ICgpID0%2BIHsKICAgIGxldCAoY291bnRlciwgc2V0Q291bnRlcikgPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiAwKTsKCiAgICA8ZGl2IHN0eWxlPVN0eWxlcy5yb290PgogICAgICA8YnV0dG9uIHN0eWxlPVN0eWxlcy5idXR0b24gb25DbGljaz17X2V2dCA9PiBzZXRDb3VudGVyKHYgPT4gdiAtIDEpfT4KICAgICAgICB7UmVhY3Quc3RyaW5nKCItIil9CiAgICAgIDwvYnV0dG9uPgogICAgICA8c3BhbiBzdHlsZT1TdHlsZXMubnVtYmVyPgogICAgICAgIHtjb3VudGVyIHw%2BIEludC50b19zdHJpbmcgfD4gUmVhY3Quc3RyaW5nfQogICAgICA8L3NwYW4%2BCiAgICAgIDxidXR0b24gc3R5bGU9U3R5bGVzLmJ1dHRvbiBvbkNsaWNrPXtfZXZ0ID0%2BIHNldENvdW50ZXIodiA9PiB2ICsgMSl9PgogICAgICAgIHtSZWFjdC5zdHJpbmcoIisiKX0KICAgICAgPC9idXR0b24%2BCiAgICA8L2Rpdj47CiAgfTsKfTsKCnN3aXRjaCAoUmVhY3RET00ucXVlcnlTZWxlY3RvcigiI3ByZXZpZXciKSkgewp8IE5vbmUgPT4gSnMubG9nKCJGYWlsZWQgdG8gc3RhcnQgUmVhY3Q6IGNvdWxkbid0IGZpbmQgdGhlICNwcmV2aWV3IGVsZW1lbnQiKQp8IFNvbWUocm9vdCkgPT4KICBsZXQgcm9vdCA9IFJlYWN0RE9NLkNsaWVudC5jcmVhdGVSb290KHJvb3QpOwogIFJlYWN0RE9NLkNsaWVudC5yZW5kZXIocm9vdCwgPENvdW50ZXIgLz4pOwp9Owo%3D&amp;live=on" target="_blank" rel="noreferrer">playground link</a> for the fully-styled Counter component.</p><hr><p>W00t! You are now empowered to use numbers in your OCaml programs.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>Integer and float are separate types in OCaml, but both translate to JavaScript’s <code>Number</code> type once your program is compiled</li><li>Comparison operators expect the values on both sides to be the same type</li><li>Integer arithmetic operators are the same as in JavaScript, but float arithmetic operators are different (they end with <code>.</code>) and only accept floats as inputs</li><li>Melange Playground is a great way to play around with short OCaml programs and has many helpful features: <ul><li>Display console output</li><li>Display compiled JavaScript output</li><li>Display error messages when your code isn’t compiling</li><li>Show type hints on hover</li><li>Share code snippets via URL</li><li>Render ReasonReact components</li></ul></li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> Convert the Counter component we created in the previous chapter to use float instead of integer. Make the <code>-</code> button decrement by <code>0.5</code> and the <code>+</code> button increment by <code>1.5</code>.</p><details class="details custom-block"><summary>Solution</summary><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">counter</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setCounter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">useState(</span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Style</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">make(</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~padding</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~display</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;flex&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~gridGap</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">()</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">-.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; {counter </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">to_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">counter</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">setCounter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">useState(</span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Style</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">make(</span></span>
<span class="line"><span style="color:#24292E;">      ~padding</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~display</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;flex&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      ~gridGap</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">()</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">    )}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">-.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; {counter </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">to_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div></details><p><b>2.</b> Add an int64 value to your program in Melange Playground:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">baz</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42_000_000_000</span><span style="color:#E1E4E8;">L</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// int64</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(baz)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">baz</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42_000_000_000</span><span style="color:#24292E;">L</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// int64</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(baz)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Note the use of underscores to make the large number more readable. What is the JavaScript representation of int64?</p><details class="details custom-block"><summary>Solution</summary><p>JavaScript’s <code>Number</code> type doesn’t have enough precision to represent in64 values. They’re instead represented by an array of two numbers <code>[high, low]</code>, where <code>high</code> is signed, <code>low</code> is unsigned.</p></details><p><b>3.</b> How do you add two int64 values?</p><details class="details custom-block"><summary>Hint</summary><p>Take a look at the standard library’s <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/Int64/index.html" target="_blank" rel="noreferrer">Int64 module</a>.</p></details><details class="details custom-block"><summary>Solution</summary><p>You can add two int64 values using <code>Int64.add</code>, e.g.</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int64</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">add(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">L</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">L)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(result)</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// prints [0,58]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int64</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">add(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">L</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">L)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(result)</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// prints [0,58]</span></span></code></pre></div></details><hr><p>View <a href="https://github.com/melange-re/melange-for-react-devs/blob/main/src/numeric-types/" target="_blank" rel="noreferrer">source code</a> and <a href="https://react-book.melange.re/demo/src/numeric-types/" target="_blank" rel="noreferrer">demo</a> for this chapter.</p>`,67),e=[p];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{D as __pageData,d as default};
