import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const B=JSON.parse('{"title":"Sandwich Tests","description":"","frontmatter":{},"headers":[],"relativePath":"sandwich-tests/index.md","filePath":"sandwich-tests/index.md","lastUpdated":1718989189000}'),o={name:"sandwich-tests/index.md"},p=l(`<h1 id="sandwich-tests" tabindex="-1">Sandwich Tests <a class="header-anchor" href="#sandwich-tests" aria-label="Permalink to &quot;Sandwich Tests&quot;">​</a></h1><p>One day over drinks at the local bar, Madame Jellobutter tearfully recounts to you how her previous venture, Unicorn BBQ, failed in part because of a terribly buggy and crashy website. It was so traumatizing that she still has nightmares about that website to this day! After the conversation, you decide to write some unit tests.</p><h2 id="install-melange-fest-via-opam" tabindex="-1">Install <code>melange-fest</code> via opam <a class="header-anchor" href="#install-melange-fest-via-opam" aria-label="Permalink to &quot;Install \`melange-fest\` via opam&quot;">​</a></h2><p>After asking around in the <code>#melange</code> channel of the <a href="https://melange.re/v4.0.0/community.html#community" target="_blank" rel="noreferrer">Reason Discord chatroom</a>, you get a recommendation from user MonadicFanatic1984 to try out <a href="https://github.com/ahrefs/melange-fest" target="_blank" rel="noreferrer">melange-fest</a>, a library that allows you to write tests in OCaml and run them in <a href="https://nodejs.org/api/test.html#test-runner" target="_blank" rel="noreferrer">Node test runner</a>. You decide to give it a shot!</p><p>Run this from your project’s root directory:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">opam</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">melange-fest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">opam</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">melange-fest</span></span></code></pre></div><p>Once that finishes, run</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">opam</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">opam</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span></span></code></pre></div><p>to see all the packages you’ve installed in your <em>opam switch</em> (more on that later). Scroll down to the entry for <code>melange-fest</code> and you should see something like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">melange-fest    0.1.0   A minimal test framework for Melange</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">melange-fest    0.1.0   A minimal test framework for Melange</span></span></code></pre></div><p>Open <code>melange-for-react-devs.opam</code> and add a corresponding entry in the <code>depends</code> section for <code>melange-fest</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">depends: [</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;ocaml&quot; {&gt;= &quot;5.1.1&quot;}</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;reason&quot; {&gt;= &quot;3.10.0&quot;}</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;dune&quot; {&gt;= &quot;3.8&quot;}</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;melange&quot; {&gt;= &quot;4.0.0-51&quot;}</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;reason-react&quot; {&gt;= &quot;0.14.0&quot;}</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;reason-react-ppx&quot; {&gt;= &quot;0.14.0&quot;}</span></span>
<span class="line diff add"><span style="color:#e1e4e8;">  &quot;melange-fest&quot; {&gt;= &quot;0.1.0&quot;} </span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;opam-check-npm-deps&quot; {with-test} # todo: use with-dev-setup once opam 2.2 is out</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;ocaml-lsp-server&quot; {with-test} # todo: use with-dev-setup once opam 2.2 is out</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;dot-merlin-reader&quot; {with-test} # todo: use with-dev-setup once opam 2.2 is out</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;odoc&quot; {with-doc}</span></span>
<span class="line"><span style="color:#e1e4e8;">]</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292e;">depends: [</span></span>
<span class="line"><span style="color:#24292e;">  &quot;ocaml&quot; {&gt;= &quot;5.1.1&quot;}</span></span>
<span class="line"><span style="color:#24292e;">  &quot;reason&quot; {&gt;= &quot;3.10.0&quot;}</span></span>
<span class="line"><span style="color:#24292e;">  &quot;dune&quot; {&gt;= &quot;3.8&quot;}</span></span>
<span class="line"><span style="color:#24292e;">  &quot;melange&quot; {&gt;= &quot;4.0.0-51&quot;}</span></span>
<span class="line"><span style="color:#24292e;">  &quot;reason-react&quot; {&gt;= &quot;0.14.0&quot;}</span></span>
<span class="line"><span style="color:#24292e;">  &quot;reason-react-ppx&quot; {&gt;= &quot;0.14.0&quot;}</span></span>
<span class="line diff add"><span style="color:#24292e;">  &quot;melange-fest&quot; {&gt;= &quot;0.1.0&quot;} </span></span>
<span class="line"><span style="color:#24292e;">  &quot;opam-check-npm-deps&quot; {with-test} # todo: use with-dev-setup once opam 2.2 is out</span></span>
<span class="line"><span style="color:#24292e;">  &quot;ocaml-lsp-server&quot; {with-test} # todo: use with-dev-setup once opam 2.2 is out</span></span>
<span class="line"><span style="color:#24292e;">  &quot;dot-merlin-reader&quot; {with-test} # todo: use with-dev-setup once opam 2.2 is out</span></span>
<span class="line"><span style="color:#24292e;">  &quot;odoc&quot; {with-doc}</span></span>
<span class="line"><span style="color:#24292e;">]</span></span></code></pre></div><p>Note that the version number might not be <code>0.1.0</code> when you run <code>opam list</code>. If it’s different, just use that version number instead.</p><p>Now if we want to install this project on another computer, we don’t need to manually install <code>melange-fest</code>; it will be installed along with all the other dependencies when we run <code>opam install . --deps-only</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> (this is already done for you when you run <code>npm run init</code>).</p><h2 id="opam-switch" tabindex="-1">Opam switch <a class="header-anchor" href="#opam-switch" aria-label="Permalink to &quot;Opam switch&quot;">​</a></h2><p>An <a href="https://ocaml.org/docs/opam-switch-introduction" target="_blank" rel="noreferrer">opam switch</a> is an isolated OCaml environment. In this book, we only use <a href="https://opam.ocaml.org/blog/opam-local-switches/" target="_blank" rel="noreferrer">local switches</a>, which are similar to Node project directories<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>. You can list all the opam switches on your computer by running</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">opam</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">switch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">opam</span><span style="color:#24292E;"> </span><span style="color:#032F62;">switch</span></span></code></pre></div><p>The output will look something like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#  switch                     compiler                   description</span></span>
<span class="line"><span style="color:#e1e4e8;">→  ~/melange-for-react-devs   ocaml-base-compiler.5.1.1  ~/melange-for-react-devs</span></span>
<span class="line"><span style="color:#e1e4e8;">   default                    ocaml.5.1.0                default</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">[NOTE] Current switch has been selected based on the current directory.</span></span>
<span class="line"><span style="color:#e1e4e8;">       The current global system switch is default.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#  switch                     compiler                   description</span></span>
<span class="line"><span style="color:#24292e;">→  ~/melange-for-react-devs   ocaml-base-compiler.5.1.1  ~/melange-for-react-devs</span></span>
<span class="line"><span style="color:#24292e;">   default                    ocaml.5.1.0                default</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[NOTE] Current switch has been selected based on the current directory.</span></span>
<span class="line"><span style="color:#24292e;">       The current global system switch is default.</span></span></code></pre></div><p>As implied by <code>[NOTE]</code>, you don’t need to manually set the opam switch for your project, the switch is set based on your current working directory<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>.</p><h2 id="first-test" tabindex="-1">First test <a class="header-anchor" href="#first-test" aria-label="Permalink to &quot;First test&quot;">​</a></h2><p>Add a new file <code>src/order-confirmation/SandwichTests.re</code> and add a simple test to it:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Fest</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Fest</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fest</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">equal(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toEmoji(</span><span style="color:#79B8FF;">Portabello</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪(🍄)</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Fest</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Fest</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fest</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">equal(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toEmoji(</span><span style="color:#005CC5;">Portabello</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪(🍄)</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>You should get this error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File &quot;docs/order-confirmation/SandwichTests.re&quot;, line 2, characters 0-9:</span></span>
<span class="line"><span style="color:#e1e4e8;">2 | Fest.test(&quot;Item.Sandwich.toEmoji&quot;, () =&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    ^^^^^^^^^</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: Unbound module Fest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File &quot;docs/order-confirmation/SandwichTests.re&quot;, line 2, characters 0-9:</span></span>
<span class="line"><span style="color:#24292e;">2 | Fest.test(&quot;Item.Sandwich.toEmoji&quot;, () =&gt;</span></span>
<span class="line"><span style="color:#24292e;">    ^^^^^^^^^</span></span>
<span class="line"><span style="color:#24292e;">Error: Unbound module Fest</span></span></code></pre></div><p>In order to use a library, you must add it to the <code>libraries</code> field of the <code>melange.emit</code> stanza in your <code>dune</code> file:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">melange.emit</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">target</span><span style="color:#E1E4E8;"> output)</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">libraries</span><span style="color:#E1E4E8;"> reason-react) </span></span>
<span class="line diff add"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">libraries</span><span style="color:#E1E4E8;"> reason-react melange-fest) </span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">preprocess</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">pps</span><span style="color:#E1E4E8;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">module_systems</span><span style="color:#E1E4E8;"> es6)</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">runtime_deps</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">glob_files</span><span style="color:#E1E4E8;"> *.css)))</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">melange.emit</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">target</span><span style="color:#24292E;"> output)</span></span>
<span class="line diff remove"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">libraries</span><span style="color:#24292E;"> reason-react) </span></span>
<span class="line diff add"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">libraries</span><span style="color:#24292E;"> reason-react melange-fest) </span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">preprocess</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">pps</span><span style="color:#24292E;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">module_systems</span><span style="color:#24292E;"> es6)</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">runtime_deps</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">glob_files</span><span style="color:#24292E;"> *.css)))</span></span></code></pre></div><h2 id="opening-a-module" tabindex="-1">Opening a module <a class="header-anchor" href="#opening-a-module" aria-label="Permalink to &quot;Opening a module&quot;">​</a></h2><p>We’ll be adding several more tests to this file, and it’ll quickly become tiresome to have to write <code>Fest.test</code>, <code>Fest.expect</code>, and <code>Fest.equal</code> all the time.</p><p>The easiest way to save typing is by using a module alias:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fest</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">F</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">F</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">expect </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">F</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">equal(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toEmoji(</span><span style="color:#79B8FF;">Portabello</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪(🍄)</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fest</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">F</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">F</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">expect </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">equal(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toEmoji(</span><span style="color:#005CC5;">Portabello</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪(🍄)</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>However, because <code>SandwichTests</code> is a module for tests and <code>Fest</code> only contains testing-related functions, it’s reasonable to <a href="https://reasonml.github.io/docs/en/module#opening-modules" target="_blank" rel="noreferrer">open</a> the <code>Fest</code> module and make all its functions available inside the scope of the <code>SandwichTests</code> module:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">open</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fest</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  expect </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> equal(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toEmoji(</span><span style="color:#79B8FF;">Portabello</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪(🍄)</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">open</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fest</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  expect </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> equal(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toEmoji(</span><span style="color:#005CC5;">Portabello</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪(🍄)</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In most cases, <code>open</code> should not be used at the toplevel of a module. It usually makes more sense to use a <a href="https://reasonml.github.io/docs/en/module#local-opens" target="_blank" rel="noreferrer">local open</a> which makes all the functions of the opened module available inside the scope of a function or submodule.</p></div><h2 id="compile-with-mjs-extension" tabindex="-1">Compile with <code>.mjs</code> extension <a class="header-anchor" href="#compile-with-mjs-extension" aria-label="Permalink to &quot;Compile with \`.mjs\` extension&quot;">​</a></h2><p>Now that your <code>SandwichTests.re</code> compiles, try running the outputted <code>.js</code> file in Node:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.js</span></span></code></pre></div><p>You’ll probably see this error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(node:68498) Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</span></span>
<span class="line"><span style="color:#e1e4e8;">(Use \`node --trace-warnings ...\` to show where the warning was created)</span></span>
<span class="line"><span style="color:#e1e4e8;">/home/fhsu/work/melange-for-react-devs/_build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.js:3</span></span>
<span class="line"><span style="color:#e1e4e8;">import * as Assert from &quot;assert&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">^^^^^^</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">SyntaxError: Cannot use import statement outside a module</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(node:68498) Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</span></span>
<span class="line"><span style="color:#24292e;">(Use \`node --trace-warnings ...\` to show where the warning was created)</span></span>
<span class="line"><span style="color:#24292e;">/home/fhsu/work/melange-for-react-devs/_build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.js:3</span></span>
<span class="line"><span style="color:#24292e;">import * as Assert from &quot;assert&quot;;</span></span>
<span class="line"><span style="color:#24292e;">^^^^^^</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">SyntaxError: Cannot use import statement outside a module</span></span></code></pre></div><p>Recent versions of Node support <a href="https://nodejs.org/api/esm.html#introduction" target="_blank" rel="noreferrer">ECMAScript modules</a>, but Node uses <a href="https://nodejs.org/api/modules.html#modules-commonjs-modules" target="_blank" rel="noreferrer">CommonJS modules</a> by default. Node automatically treats <code>.mjs</code> files as ECMAScript modules, so you can change the <code>module_systems</code> field of your <code>melange.emit</code> stanza to use the <code>.mjs</code> extension:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">melange.emit</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">target</span><span style="color:#E1E4E8;"> output)</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">libraries</span><span style="color:#E1E4E8;"> reason-react melange-fest)</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">preprocess</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">pps</span><span style="color:#E1E4E8;"> melange.ppx reason-react-ppx))</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">module_systems</span><span style="color:#E1E4E8;"> es6)  </span></span>
<span class="line diff add"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">module_systems</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">es6</span><span style="color:#E1E4E8;"> mjs))  </span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">runtime_deps</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">glob_files</span><span style="color:#E1E4E8;"> *.css)))</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">melange.emit</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">target</span><span style="color:#24292E;"> output)</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">libraries</span><span style="color:#24292E;"> reason-react melange-fest)</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">preprocess</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">pps</span><span style="color:#24292E;"> melange.ppx reason-react-ppx))</span></span>
<span class="line diff remove"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">module_systems</span><span style="color:#24292E;"> es6)  </span></span>
<span class="line diff add"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">module_systems</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">es6</span><span style="color:#24292E;"> mjs))  </span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">runtime_deps</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">glob_files</span><span style="color:#24292E;"> *.css)))</span></span></code></pre></div><p>Now rebuild and run the test on the newly-generated <code>SandwichTests.mjs</code> file:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span>
<span class="line"><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.mjs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span>
<span class="line"><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.mjs</span></span></code></pre></div><p>The tests should run successfully this time!</p><p>Since you’ve changed the extension of your generated JavaScript files to <code>.mjs</code>, you must also change the reference in <code>src/order-confirmation/index.html</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Melange for React Devs&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../../_build/default/src/order-confirmation/output/src/order-confirmation/Index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../../_build/default/src/order-confirmation/output/src/order-confirmation/Index.mjs&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Melange for React Devs&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line diff remove"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../_build/default/src/order-confirmation/output/src/order-confirmation/Index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt; </span></span>
<span class="line diff add"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../_build/default/src/order-confirmation/output/src/order-confirmation/Index.mjs&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="add-test-npm-script" tabindex="-1">Add <code>test</code> npm script <a class="header-anchor" href="#add-test-npm-script" aria-label="Permalink to &quot;Add \`test\` npm script&quot;">​</a></h2><p>To save ourselves from having to repeatedly type the commands to rebuild the project and run the test, add a new npm script to <code>package.json</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;npm run build &amp;&amp; node _build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.mjs&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;npm run build &amp;&amp; node _build/default/src/order-confirmation/output/src/order-confirmation/SandwichTests.mjs&quot;</span></span></code></pre></div><p>In the next chapter, we’ll see a way to shorten this script.</p><h2 id="test-item-sandwich-toprice" tabindex="-1">Test <code>Item.Sandwich.toPrice</code> <a class="header-anchor" href="#test-item-sandwich-toprice" aria-label="Permalink to &quot;Test \`Item.Sandwich.toPrice\`&quot;">​</a></h2><p>Let’s add a test for <code>Item.Sandwich.toPrice</code>. However, in its current form, it’s not testable since it’s a nondeterministic function which can return different values depending on what the date is. So first we must refactor it into a <a href="https://en.wikipedia.org/wiki/Pure_function" target="_blank" rel="noreferrer">pure function</a>, i.e. make it free from side effects. The easiest way to do so is by adding a <code>date</code> argument:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line highlighted"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~date</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> t) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">day</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">getDay </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> int_of_float</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (t) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Portabello</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Ham</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Unicorn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">80</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Turducken</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">when</span><span style="color:#E1E4E8;"> day </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Turducken</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line highlighted"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~date</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> t) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">day</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">getDay </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> int_of_float</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (t) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Portabello</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Ham</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Unicorn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Turducken</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">when</span><span style="color:#24292E;"> day </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Turducken</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>To quiet the compiler, you must also update <code>Item.toPrice</code> accordingly:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (t) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sandwich</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(sandwich</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> ~date</span><span style="color:#FDAEB7;">=</span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">make</span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">burger</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Burger</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(burger)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (t) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sandwich</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(sandwich</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> ~date</span><span style="color:#B31D28;">=</span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">make</span><span style="color:#005CC5;">()</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">burger</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Burger</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(burger)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Now you can use the <a href="https://ahrefs.github.io/melange-fest/reason/Fest/index.html#val-deepEqual" target="_blank" rel="noreferrer">Fest.deepEqual</a> function to write the test for <code>Item.Sandwich.toPrice</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sandwiches</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[|</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Portabello</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Ham</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Unicorn</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Turducken</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">|]</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 14 Feb 2024 is a Wednesday</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">makeWithYMD(~year</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2024</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~month</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~date</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">14</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> deepEqual(</span></span>
<span class="line"><span style="color:#E1E4E8;">       sandwiches</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">item </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(~date</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item))</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">80</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">|]</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* expected prices */</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sandwiches</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[|</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Portabello</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Ham</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Unicorn</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Turducken</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">|]</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 14 Feb 2024 is a Wednesday</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">makeWithYMD(~year</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2024</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~month</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~date</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">14</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> deepEqual(</span></span>
<span class="line"><span style="color:#24292E;">       sandwiches</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">item </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(~date</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item))</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">|]</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* expected prices */</span></span>
<span class="line"><span style="color:#24292E;">     )</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">})</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Here we create an array of <code>Item.Sandwich.t</code>, tranform it to an array of prices, then compare that array with an array of expected prices.</p><h2 id="punning-for-function-arguments" tabindex="-1">Punning for function arguments <a class="header-anchor" href="#punning-for-function-arguments" aria-label="Permalink to &quot;Punning for function arguments&quot;">​</a></h2><p>Note that the following chunk of code uses <a href="https://reasonml.github.io/docs/en/jsx#punning" target="_blank" rel="noreferrer">punning</a>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">makeWithYMD(~year</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2024</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~month</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~date</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">14</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sandwiches</span></span>
<span class="line highlighted"><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">item </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(~date</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item))</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">makeWithYMD(~year</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2024</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~month</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~date</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">14</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sandwiches</span></span>
<span class="line highlighted"><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">item </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(~date</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item))</span></span></code></pre></div><p>Punning means that <code>~date=date</code> gets shortened to just <code>~date</code>.</p><h2 id="type-inference" tabindex="-1">Type inference <a class="header-anchor" href="#type-inference" aria-label="Permalink to &quot;Type inference&quot;">​</a></h2><p>It’s actually not necessary to create a <code>sandwiches</code> variable, we can feed the array directly to <code>Js.Array.map</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 14 Feb 2024 is a Wednesday</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">makeWithYMD(~year</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2024</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~month</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~date</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">14</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> deepEqual(</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|Portabello</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Ham</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Unicorn</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Turducken|]</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">item </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(~date</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item))</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">80</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">|]</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 14 Feb 2024 is a Wednesday</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">makeWithYMD(~year</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2024</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~month</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~date</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">14</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> deepEqual(</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|Portabello</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Ham</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Unicorn</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Turducken|]</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">item </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(~date</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item))</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">|]</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">     )</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">})</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The OCaml compiler can infer that <code>[|Portabello, Ham, Unicorn, Turducken|]</code> is of type <code>array(Item.Sandwich.t)</code> because</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">item </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(~date</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">item </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(~date</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item))</span></span></code></pre></div><p>is a function that only accepts an argument of the type <code>array(Item.Sandwich.t)</code>.</p><hr><p>Sugoi! You now have a module for testing sandwich-related logic. In the next chapter, we’ll see how to integrate your tests with the Dune build system.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>An opam switch is an isolated OCaml environment</li><li>Use <code>opam list</code> to see all the packages installed in your current opam switch</li><li>Use <code>opam install</code> to install third-party packages into the current opam switch</li><li>After you install a package, you should: <ul><li>Add it to your <code>.opam</code> file so that it will be installed with all your other dependencies the next time you run <code>opam install . --deps-only</code></li><li>Add the corresponding library to the <code>libraries</code> field of your <code>melange.emit</code> stanza so your code can use it</li></ul></li><li><a href="https://github.com/ahrefs/melange-fest" target="_blank" rel="noreferrer">melange-fest</a> is a testing library that allows you write tests in OCaml and run them in Node test runner</li><li>You can <code>open</code> a module to make all its functions available in the current scope, but you should do this sparingly</li><li>To generate <code>.mjs</code> files that are treated by Node as ECMASCript modules, set the <code>melange.emit</code> stanza’s <code>module_systems</code> field to <code>(es6 mjs)</code></li><li>Punning shortens function invocations by transforming <code>~foo=foo</code> into just <code>foo</code>.</li><li>Sometimes you can use a value without any type annotation because the compiler can infer the type based on the type signature of the function it’s fed into</li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> Use <a href="https://ahrefs.github.io/melange-fest/reason/Fest/index.html#val-deepEqual" target="_blank" rel="noreferrer">Fest.deepEqual</a> to improve the existing test for <code>Item.Sandwich.toEmoji</code> by testing for all possible outputs.</p><details class="details custom-block"><summary>Solution</summary><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> deepEqual(</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|Portabello</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Ham</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Unicorn</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Turducken|]</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toEmoji)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪(🍄)</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪(🐷)</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪(🦄)</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪(🦃🦆🐓)</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">|]</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toEmoji&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> deepEqual(</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|Portabello</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Ham</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Unicorn</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Turducken|]</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toEmoji)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪(🍄)</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪(🐷)</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪(🦄)</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪(🦃🦆🐓)</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">|]</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">})</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Note the use of <a href="https://reasonml.github.io/docs/en/function#partial-application" target="_blank" rel="noreferrer">partial application</a> in the callback to <code>Js.Array.map</code>.</p></details><p><b>2.</b> Write a new unit test for <code>Item.Sandwich.toPrice</code> that checks the date-dependent logic for Turducken sandwiches.</p><details class="details custom-block"><summary>Hint</summary><p>Use <a href="https://melange.re/v4.0.0/api/re/melange/Js/Date/#val-makeWithYMD" target="_blank" rel="noreferrer">Js.Date.makeWithYMD</a> and <code>Js.Array.map</code> to generate a whole week’s worth of dates. Here’s a <a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=bGV0IGRhdGVzID0KICBbfDEuLCAyLiwgMy4sIDQuLCA1LiwgNi4sIDcufF0KICB8PiBKcy5BcnJheS5tYXAofmY9ZGF0ZSA9PgogICAgICAgSnMuRGF0ZS5tYWtlV2l0aFlNRCh%2BeWVhcj0yMDI0Liwgfm1vbnRoPTAuLCB%2BZGF0ZSkKICAgICApOwoKZGF0ZXMKfD4gSnMuQXJyYXkuZm9yRWFjaCh%2BZj1kYXRlID0%2BCiAgICAgSnMubG9nMihKcy5EYXRlLmdldERheShkYXRlKSwgSnMuRGF0ZS50b1N0cmluZyhkYXRlKSkKICAgKTsK&amp;live=off" target="_blank" rel="noreferrer">relevant playground example</a>.</p></details><details class="details custom-block"><summary>Solution</summary><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toPrice returns lower price for Turducken on Tuesdays&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // Make an array of all dates in a single week; 1 Jan 2024 is a Monday</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dates</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">[|1</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">|]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">date </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">makeWithYMD(~year</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2024</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~month</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~date)</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> deepEqual(</span></span>
<span class="line"><span style="color:#E1E4E8;">       dates</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">date </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(~date</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Turducken</span><span style="color:#E1E4E8;">))</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|20</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">|]</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toPrice returns lower price for Turducken on Tuesdays&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // Make an array of all dates in a single week; 1 Jan 2024 is a Monday</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dates</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">[|1</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">|]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">date </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">makeWithYMD(~year</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2024</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~month</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~date)</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> deepEqual(</span></span>
<span class="line"><span style="color:#24292E;">       dates</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">date </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(~date</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Turducken</span><span style="color:#24292E;">))</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|20</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">|]</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">     )</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">})</span><span style="color:#B31D28;">;</span></span></code></pre></div></details><p><b>3.</b> Refactor the <code>Item.Sandwich.toPrice</code> test using punning and partial application:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* Write your code here; don&#39;t change the rest of the function */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> deepEqual(</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|Portabello</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Ham</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Unicorn</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Turducken|]</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">80</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">|]</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* Write your code here; don&#39;t change the rest of the function */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> deepEqual(</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|Portabello</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Ham</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Unicorn</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Turducken|]</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">|]</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">     )</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">})</span><span style="color:#B31D28;">;</span></span></code></pre></div><details class="details custom-block"><summary>Hint</summary><p>Add a new function <code>f</code> with the type signature <code>Item.Sandwich.t =&gt; float</code>.</p></details><details class="details custom-block"><summary>Solution</summary><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Sandwich</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(</span></span>
<span class="line"><span style="color:#6A737D;">      // 14 Feb 2024 is a Wednesday</span></span>
<span class="line"><span style="color:#E1E4E8;">      ~date</span><span style="color:#FDAEB7;">=</span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Date</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">makeWithYMD(~year</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2024</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~month</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~date</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">14</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> deepEqual(</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|Portabello</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Ham</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Unicorn</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Turducken|]</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">[|10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">80</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">|]</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;Item.Sandwich.toPrice&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Sandwich</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(</span></span>
<span class="line"><span style="color:#6A737D;">      // 14 Feb 2024 is a Wednesday</span></span>
<span class="line"><span style="color:#24292E;">      ~date</span><span style="color:#B31D28;">=</span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Date</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">makeWithYMD(~year</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2024</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~month</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~date</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">14</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> deepEqual(</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|Portabello</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Ham</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Unicorn</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Turducken|]</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">[|10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">|]</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">     )</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">})</span><span style="color:#B31D28;">;</span></span></code></pre></div></details><hr><p>View <a href="https://github.com/melange-re/melange-for-react-devs/blob/main/src/sandwich-tests/" target="_blank" rel="noreferrer">source code</a> and <a href="https://react-book.melange.re/demo/src/sandwich-tests/" target="_blank" rel="noreferrer">demo</a> for this chapter.</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>The <code>--deps-only</code> option tells <code>opam install</code> to only install the dependencies and not the package. When you’re developing an application and not a library, there is no package associated with your project. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>This is how Node project directories correspond to opam local switches:</p><ul><li><code>packages.json</code> -&gt; <code>.opam</code> file</li><li><code>node_modules</code> directory -&gt; <code>_opam</code> directory</li></ul><a href="#fnref2" class="footnote-backref">↩︎</a></li><li id="fn3" class="footnote-item"><p>A shell hook is responsible for setting the current opam switch based on the directory you are <code>cd</code>-ing into. The shell hook is typically installed when you run <code>opam init</code>. Just respond with <code>y</code> when it asks</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Do you want opam to modify ~/.profile?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Do you want opam to modify ~/.profile?</span></span></code></pre></div><p>Note that it may ask to modify <code>~/.zshrc</code> or some other file; the name of the file is system-dependent. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>`,87),e=[p];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{B as __pageData,u as default};
