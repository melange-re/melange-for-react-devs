import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.0e8ae64e.js";const h=JSON.parse('{"title":"Introduction to Dune","description":"","frontmatter":{},"headers":[],"relativePath":"intro-to-dune/index.md","filePath":"intro-to-dune/index.md","lastUpdated":1716395778000}'),l={name:"intro-to-dune/index.md"},o=e(`<h1 id="introduction-to-dune" tabindex="-1">Introduction to Dune <a class="header-anchor" href="#introduction-to-dune" aria-label="Permalink to &quot;Introduction to Dune&quot;">​</a></h1><p>Depending on how you’ve been following along, you may have several components in your project. Since these components don’t have much in common with each other, it makes sense to put them in separate, independent single-page apps. To do that, we’ll use <a href="https://dune.build/" target="_blank" rel="noreferrer">Dune</a>, a build system designed for OCaml projects, with many <a href="https://melange.re/v4.0.0/build-system.html#features" target="_blank" rel="noreferrer">useful features</a>. For our purposes, the feature of primary interest is its <a href="https://dune.readthedocs.io/en/stable/melange.html" target="_blank" rel="noreferrer">built-in support for Melange</a>.</p><h2 id="dune-project-file" tabindex="-1"><code>dune-project</code> file <a class="header-anchor" href="#dune-project-file" aria-label="Permalink to &quot;\`dune-project\` file&quot;">​</a></h2><p>The <code>dune-project</code> file specifies metadata for a project, and should appear in the root directory of your project. If you’ve been using the <a href="/installation/#download-and-run-the-starter-project">starter project</a>, then you’ve been using Dune this whole time and therefore already have a <code>dune-project</code> file:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(lang dune </span><span style="color:#79B8FF;">3.8</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; Use version 0.1 of the melange plugin for dune</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> melange </span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; Set the name which is used by error messages</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(name melange-for-react-devs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; Copy all build targets for an alias into the sandbox</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(expand_aliases_in_sandbox)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(lang dune </span><span style="color:#005CC5;">3.8</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; Use version 0.1 of the melange plugin for dune</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> melange </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; Set the name which is used by error messages</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(name melange-for-react-devs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; Copy all build targets for an alias into the sandbox</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(expand_aliases_in_sandbox)</span></span></code></pre></div><p>The line</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> melange </span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> melange </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span></span></code></pre></div><p>is necessary because we have to manually enable the Melange extension for Dune in order to use it. Note that the version of the Melange Dune extension is independent of the version of Melange we’re using.</p><p>Technically, <code>dune-project</code> accepts many more metadata fields, but it’s best to keep it minimal. Other than <code>name</code>, it makes more sense to put the rest of your project’s metadata fields in your <code>.opam</code> file, which we’ll cover <a href="/todo.html">later</a>.</p><p><code>dune-project</code> files use <a href="https://en.wikipedia.org/wiki/S-expression" target="_blank" rel="noreferrer">S-expressions</a>, which might make you think of the <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)" target="_blank" rel="noreferrer">Lisp programming language</a>. However, S-expressions are just a convenient syntax for encoding structured data, and Dune doesn’t have the power of a full scripting language.</p><p>Each S-expression at the top level is a known as a <em>stanza</em>. All the possible stanzas you can use in <code>dune-project</code> can be found in Dune’s <a href="https://dune.readthedocs.io/en/stable/dune-files.html#dune-project" target="_blank" rel="noreferrer">Stanza Reference</a>.</p><h2 id="dune-files" tabindex="-1"><code>dune</code> files <a class="header-anchor" href="#dune-files" aria-label="Permalink to &quot;\`dune\` files&quot;">​</a></h2><p>Besides <code>dune-project</code>, Dune also looks at the <code>dune</code> files in our project. Basically, <code>dune</code> files tell Dune about directories, executables, libraries, tests, and anything else of interest. For example, here’s the <code>dune</code> file inside the root directory of your project:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">; \`dirs\` is a stanza to tell dune which subfolders from the current folder</span></span>
<span class="line"><span style="color:#6A737D;">; (where the \`dune\` file is) it should process. Here it is saying to include</span></span>
<span class="line"><span style="color:#6A737D;">; all directories that don&#39;t start with . or _, but exclude node_modules.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">dirs</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:standard</span><span style="color:#E1E4E8;"> \\ node_modules)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; \`melange.emit\` is a Dune stanza that will produce build rules to generate</span></span>
<span class="line"><span style="color:#6A737D;">; JavaScript files from sources using the Melange compiler</span></span>
<span class="line"><span style="color:#6A737D;">; https://dune.readthedocs.io/en/stable/melange.html#melange-emit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">melange.emit</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; The \`target\` field is used by Dune to put all JavaScript artifacts in a</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; specific folder inside \`_build/default\`</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">target</span><span style="color:#E1E4E8;"> output)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; Here&#39;s the list of dependencies of the stanza. In this case (being</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; \`melange.emit\`), Dune will look into those dependencies and generate rules</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; with JavaScript targets for the modules in those libraries as well.</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; Caveat: the libraries need to be specified with \`(modes melange)\`.</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">libraries</span><span style="color:#E1E4E8;"> reason-react)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; The \`preprocess\` field lists preprocessors which transform code before it is</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; compiled. melange.ppx allows to use Melange attributes [@mel. ...]</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; (https://melange.re/v4.0.0/communicate-with-javascript.html#attributes)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; reason-react-ppx allows to use JSX for ReasonReact components by using the</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; [@JSX] attributes from Reason: https://reasonml.github.io/docs/en/jsx</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">preprocess</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">pps</span><span style="color:#E1E4E8;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; module_systems lets you specify commonjs (the default) or es6</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">module_systems</span><span style="color:#E1E4E8;"> es6))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">; \`dirs\` is a stanza to tell dune which subfolders from the current folder</span></span>
<span class="line"><span style="color:#6A737D;">; (where the \`dune\` file is) it should process. Here it is saying to include</span></span>
<span class="line"><span style="color:#6A737D;">; all directories that don&#39;t start with . or _, but exclude node_modules.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">dirs</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:standard</span><span style="color:#24292E;"> \\ node_modules)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">; \`melange.emit\` is a Dune stanza that will produce build rules to generate</span></span>
<span class="line"><span style="color:#6A737D;">; JavaScript files from sources using the Melange compiler</span></span>
<span class="line"><span style="color:#6A737D;">; https://dune.readthedocs.io/en/stable/melange.html#melange-emit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">melange.emit</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; The \`target\` field is used by Dune to put all JavaScript artifacts in a</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; specific folder inside \`_build/default\`</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">target</span><span style="color:#24292E;"> output)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; Here&#39;s the list of dependencies of the stanza. In this case (being</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; \`melange.emit\`), Dune will look into those dependencies and generate rules</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; with JavaScript targets for the modules in those libraries as well.</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; Caveat: the libraries need to be specified with \`(modes melange)\`.</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">libraries</span><span style="color:#24292E;"> reason-react)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; The \`preprocess\` field lists preprocessors which transform code before it is</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; compiled. melange.ppx allows to use Melange attributes [@mel. ...]</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; (https://melange.re/v4.0.0/communicate-with-javascript.html#attributes)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; reason-react-ppx allows to use JSX for ReasonReact components by using the</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; [@JSX] attributes from Reason: https://reasonml.github.io/docs/en/jsx</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">preprocess</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">pps</span><span style="color:#24292E;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; module_systems lets you specify commonjs (the default) or es6</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">module_systems</span><span style="color:#24292E;"> es6))</span></span></code></pre></div><p>Like <code>dune-project</code>, a <code>dune</code> file consists of one or more <em>stanzas</em>. The first stanza is <a href="https://dune.readthedocs.io/en/stable/dune-files.html#dirs" target="_blank" rel="noreferrer">dirs</a>, which tells Dune which directories to include in the build. Note that the stanzas accepted in <code>dune</code> files are not the same as the ones accepted by <code>dune-project</code>. See all possible <code>dune</code> stanzas in Dune’s <a href="https://dune.readthedocs.io/en/stable/dune-files.html#dune" target="_blank" rel="noreferrer">Stanza Reference</a>.</p><h2 id="melange-emit-stanza" tabindex="-1"><code>melange.emit</code> stanza <a class="header-anchor" href="#melange-emit-stanza" aria-label="Permalink to &quot;\`melange.emit\` stanza&quot;">​</a></h2><p>The main stanza of interest for us is <a href="https://dune.readthedocs.io/en/stable/melange.html#melange-emit" target="_blank" rel="noreferrer">melange.emit</a>, which tells Dune to turn our OCaml files into JavaScript files. The fields we give to <code>melange.emit</code> here are <code>target</code>, <code>libraries</code>, <code>preprocess</code>, and <code>module_systems</code>, which are ones that we need to use for pretty much every Melange project.</p><p><code>melange.emit</code> tells Dune to compile <code>Index.re</code> in your root directory to <code>Index.js</code> somewhere in the <code>_build/default</code> directory. The specific location of <code>Index.js</code> depends on the location of the <code>dune</code> file and the value of <code>melange.emit</code>’s <code>target</code> field. Our <code>dune</code> file is in the root directory and <code>target</code>’s value is <code>output</code>, so the location of <code>Index.js</code> is</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">_build/default/output/Index.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">_build/default/output/Index.js</span></span></code></pre></div><p>We need to know the exact location of <code>Index.js</code> so that we can reference it in the <code>index.html</code> file in the root directory:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Melange for React Developers&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;./_build/default/output/Index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Melange for React Developers&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;./_build/default/output/Index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>For more details about where JavaScript output files end up in the build directory, see <a href="https://melange.re/v4.0.0/build-system.html#javascript-artifacts-layout" target="_blank" rel="noreferrer">JavaScript artifacts layout</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In this dune file, we’re only concerned with building JavaScript to run in the browser, but if we also wanted to build JavaScript to run on Node we could include another <code>melange.emit</code> stanza specifically for that. See <a href="https://github.com/melange-re/melange-opam-template/blob/main/src/dune" target="_blank" rel="noreferrer">melange-opam-template</a> for an example of building for Node.</p></div><h2 id="counter-app-directory" tabindex="-1">Counter app directory <a class="header-anchor" href="#counter-app-directory" aria-label="Permalink to &quot;Counter app directory&quot;">​</a></h2><p>Create a new directory <code>src/counter</code>, which will contain a new app that only renders the <a href="/counter/">Counter component</a>. Then make sure this new directory contains:</p><ul><li><p><code>Counter.re</code> (move from root directory to <code>src/counter</code>)</p></li><li><p><code>dune</code> file that just has a <code>melange.emit</code> stanza</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">; \`melange.emit\` is a Dune stanza that will produce build rules to generate</span></span>
<span class="line"><span style="color:#6A737D;">; JavaScript files from sources using the Melange compiler</span></span>
<span class="line"><span style="color:#6A737D;">; https://dune.readthedocs.io/en/stable/melange.html#melange-emit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">melange.emit</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; The \`target\` field is used by Dune to put all JavaScript artifacts in a</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; specific folder inside \`_build/default\`</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">target</span><span style="color:#E1E4E8;"> output)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; Here&#39;s the list of dependencies of the stanza. In this case (being</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; \`melange.emit\`), Dune will look into those dependencies and generate rules</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; with JavaScript targets for the modules in those libraries as well.</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; Caveat: the libraries need to be specified with \`(modes melange)\`.</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">libraries</span><span style="color:#E1E4E8;"> reason-react)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; The \`preprocess\` field lists preprocessors which transform code before it is</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; compiled. These enable, for example, the use of JSX in .re files.</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">preprocess</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">pps</span><span style="color:#E1E4E8;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">; module_systems lets you specify commonjs (the default) or es6</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">module_systems</span><span style="color:#E1E4E8;"> es6))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">; \`melange.emit\` is a Dune stanza that will produce build rules to generate</span></span>
<span class="line"><span style="color:#6A737D;">; JavaScript files from sources using the Melange compiler</span></span>
<span class="line"><span style="color:#6A737D;">; https://dune.readthedocs.io/en/stable/melange.html#melange-emit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">melange.emit</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; The \`target\` field is used by Dune to put all JavaScript artifacts in a</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; specific folder inside \`_build/default\`</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">target</span><span style="color:#24292E;"> output)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; Here&#39;s the list of dependencies of the stanza. In this case (being</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; \`melange.emit\`), Dune will look into those dependencies and generate rules</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; with JavaScript targets for the modules in those libraries as well.</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; Caveat: the libraries need to be specified with \`(modes melange)\`.</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">libraries</span><span style="color:#24292E;"> reason-react)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; The \`preprocess\` field lists preprocessors which transform code before it is</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; compiled. These enable, for example, the use of JSX in .re files.</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">preprocess</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">pps</span><span style="color:#24292E;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">; module_systems lets you specify commonjs (the default) or es6</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">module_systems</span><span style="color:#24292E;"> es6))</span></span></code></pre></div></li><li><p><code>Index.re</code> to render the app to the DOM</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Counter&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> /&gt; &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">querySelector(</span><span style="color:#DBEDFF;">&quot;#root&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (node) {</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Console</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">error(</span><span style="color:#DBEDFF;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">createRoot(root)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">render(root</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> /&gt;)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Counter&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> /&gt; &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">querySelector(</span><span style="color:#032F62;">&quot;#root&quot;</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (node) {</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Console</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">error(</span><span style="color:#032F62;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">createRoot(root)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">render(root</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> /&gt;)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div></li><li><p><code>index.html</code> is the page for your new app and tells Vite where to find <code>Index.js</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Melange for React Devs&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../../_build/default/src/counter/output/src/counter/Index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Melange for React Devs&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../_build/default/src/counter/output/src/counter/Index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li></ul><p>After you’ve added those files, your <code>src/counter</code> directory should look like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">src/counter</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Counter.re</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ dune</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Index.re</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">src/counter</span></span>
<span class="line"><span style="color:#24292e;">├─ Counter.re</span></span>
<span class="line"><span style="color:#24292e;">├─ dune</span></span>
<span class="line"><span style="color:#24292e;">├─ Index.re</span></span>
<span class="line"><span style="color:#24292e;">└─ index.html</span></span></code></pre></div><h2 id="structure-of-build-directory" tabindex="-1">Structure of <code>_build</code> directory <a class="header-anchor" href="#structure-of-build-directory" aria-label="Permalink to &quot;Structure of \`_build\` directory&quot;">​</a></h2><p>If you look inside the <code>_build/default/src/counter</code> directory, you’ll see that your <code>src/counter</code> directory is essentially mirrored there, along with some extra files:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">_build/default/src/counter</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ .merlin-conf/</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ .output.mobjs/</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ output/</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Counter.re</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Counter.re.ml</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Counter.re.pp.ml</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Index.re</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Index.re.ml</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ Index.re.pp.ml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">_build/default/src/counter</span></span>
<span class="line"><span style="color:#24292e;">├─ .merlin-conf/</span></span>
<span class="line"><span style="color:#24292e;">├─ .output.mobjs/</span></span>
<span class="line"><span style="color:#24292e;">├─ output/</span></span>
<span class="line"><span style="color:#24292e;">├─ Counter.re</span></span>
<span class="line"><span style="color:#24292e;">├─ Counter.re.ml</span></span>
<span class="line"><span style="color:#24292e;">├─ Counter.re.pp.ml</span></span>
<span class="line"><span style="color:#24292e;">├─ Index.re</span></span>
<span class="line"><span style="color:#24292e;">├─ Index.re.ml</span></span>
<span class="line"><span style="color:#24292e;">└─ Index.re.pp.ml</span></span></code></pre></div><p>Extra files and directories like <code>.output.mobjs</code> and <code>Counter.re.ml</code> are build artifacts and we won’t go into any detail about them. If you look inside <code>_build/default/src/counter/output/src/counter</code>, you’ll see that <code>src/counter</code> is mirrored there as well, but this time the directory only contains the generated <code>.js</code> files:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">_build/default/src/counter/output/src/counter</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ .output.mobjs/</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Counter.js</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ Index.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">_build/default/src/counter/output/src/counter</span></span>
<span class="line"><span style="color:#24292e;">├─ .output.mobjs/</span></span>
<span class="line"><span style="color:#24292e;">├─ Counter.js</span></span>
<span class="line"><span style="color:#24292e;">└─ Index.js</span></span></code></pre></div><p>So the <code>_build</code> directory contains two mirrored directories for <code>src/counter</code>:</p><ul><li><code>_build/default/src/counter</code>, which contains copies of the <code>.re</code> source files and their intermediate build artifacts</li><li><code>_build/default/src/counter/output/src/counter</code>, which contains the final generated <code>.js</code> files.</li></ul><h2 id="update-root-directory-index-html" tabindex="-1">Update root directory <code>index.html</code> <a class="header-anchor" href="#update-root-directory-index-html" aria-label="Permalink to &quot;Update root directory \`index.html\`&quot;">​</a></h2><p>Now that we’ve added <code>src/counter/index.html</code>, we don’t need the root directory’s <code>index.html</code> to render the Counter app. Instead, it can serve as an index page to link to all of our single-page apps. Change <code>index.html</code> to this:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Melange for React Developers&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Melange for React Developers&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;src/counter/index.html&quot;</span><span style="color:#E1E4E8;">&gt;Counter&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Melange for React Developers&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Melange for React Developers&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;src/counter/index.html&quot;</span><span style="color:#24292E;">&gt;Counter&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Now run <code>npm run serve</code> to check that everything works as expected.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Feel free to do a little cleanup before moving on:</p><ul><li>Delete the <code>Index.re</code> file in the root directory</li><li>Delete the <code>melange.emit</code> stanza from the root directory’s <code>dune</code> file</li></ul></div><h2 id="rationale-for-monorepo-structure" tabindex="-1">Rationale for monorepo structure <a class="header-anchor" href="#rationale-for-monorepo-structure" aria-label="Permalink to &quot;Rationale for monorepo structure&quot;">​</a></h2><p>Going forward, we’re going to use a <a href="https://en.wikipedia.org/wiki/Monorepo" target="_blank" rel="noreferrer">monorepo</a> where projects are separate apps that are developed in their own directory. Each project directory will have its own <code>dune</code> file with its own <code>melange.emit</code> stanza. We want to use a monorepo because most projects will have very similar dependencies, so it seems overkill to create new <code>dune-project</code>, <code>.opam</code>, and <code>package.json</code> files<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> for every single project.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Melange documentation’s <a href="https://melange.re/v4.0.0/build-system.html#guidelines-for-melange-emit" target="_blank" rel="noreferrer">guidelines for melange.emit</a> recommends you put the <code>melange.emit</code> stanza in the <code>dune</code> file in the project’s root directory. We are no longer doing that going forward, but this is still great advice if your repo only contains a single app!</p></div><hr><p>Huzzah! You created a new <code>dune</code> file to build an app and created an index page for all your apps. In future chapters, we assume that you will use the same directory structure for each new app you build.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>Dune is the build system we use to build Melange projects</li><li>The <code>dune-project</code> file describes the metadata for your project, primarily: <ul><li>The version of Dune you’re using</li><li>The version of the Melange plugin for Dune you’re using</li><li>The name of your project</li></ul></li><li><code>dune</code> files describe things of interest to Dune, for example: <ul><li>Which directories to include and which to exclude</li><li>Which directories contain code that should be transpiled to JavaScript, using the <code>melange.emit</code> stanza</li></ul></li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> Repeat the steps we did for Counter and create a separate app for Celsius Converter.</p><details class="details custom-block"><summary>Solution</summary><p>Creating a separate app for Celsius Converter, with its own <code>dune</code>, <code>Index.re</code>, and <code>index.html</code> files, should look something like <a href="https://github.com/melange-re/melange-for-react-devs/tree/main/src/celsius-converter-option" target="_blank" rel="noreferrer">this</a>. For ease of navigation, you should also update <code>index.html</code> in the root directory:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;src/counter/index.html&quot;</span><span style="color:#E1E4E8;">&gt;Counter&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;src/celsius-converter-exception/index.html&quot;</span><span style="color:#E1E4E8;">&gt;Celsius Converter&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;src/counter/index.html&quot;</span><span style="color:#24292E;">&gt;Counter&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;src/celsius-converter-exception/index.html&quot;</span><span style="color:#24292E;">&gt;Celsius Converter&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></details><p><b>2.</b> Delete <code>reason-react-ppx</code> from <code>src/counter/dune</code>’s <code>melange.emit</code> stanza. What compiler errors do you get?</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(preprocess</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">  (pps melange.ppx reason-react-ppx)) </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">  (pps melange.ppx)) </span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">(preprocess</span></span>
<span class="line diff remove"><span style="color:#24292E;">  (pps melange.ppx reason-react-ppx)) </span></span>
<span class="line diff add"><span style="color:#24292E;">  (pps melange.ppx)) </span></span></code></pre></div><details class="details custom-block"><summary>Solution</summary><p>The compilation error will be:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File &quot;src/counter/Counter.re&quot;, line 5, characters 2-6:</span></span>
<span class="line"><span style="color:#e1e4e8;">5 |   &lt;div</span></span>
<span class="line"><span style="color:#e1e4e8;">      ^^^^</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: Unbound value div</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File &quot;src/counter/Counter.re&quot;, line 5, characters 2-6:</span></span>
<span class="line"><span style="color:#24292e;">5 |   &lt;div</span></span>
<span class="line"><span style="color:#24292e;">      ^^^^</span></span>
<span class="line"><span style="color:#24292e;">Error: Unbound value div</span></span></code></pre></div><p>That’s because putting <code>reason-react-ppx</code> in the <code>preprocess/pps</code> field will transform function calls to <code>div</code> (which isn’t defined anywhere) into calls to <code>React.createElement(&quot;div&quot;, ...)</code><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p></details><p><b>3.</b> Assume you have a directory <code>foo/bar</code> in the root of your project directory with these files in it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">foo/bar</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Hello.re</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ dune</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">foo/bar</span></span>
<span class="line"><span style="color:#24292e;">├─ Hello.re</span></span>
<span class="line"><span style="color:#24292e;">└─ dune</span></span></code></pre></div><p>The contents of <code>foo/bar/dune</code> are:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">melange.emit</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">target</span><span style="color:#E1E4E8;"> dist)</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">libraries</span><span style="color:#E1E4E8;"> reason-react)</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">preprocess</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#F97583;">pps</span><span style="color:#E1E4E8;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">module_systems</span><span style="color:#E1E4E8;"> es6))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">melange.emit</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">target</span><span style="color:#24292E;"> dist)</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">libraries</span><span style="color:#24292E;"> reason-react)</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">preprocess</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#D73A49;">pps</span><span style="color:#24292E;"> melange.ppx reason-react-ppx))</span></span>
<span class="line"><span style="color:#24292E;"> (</span><span style="color:#D73A49;">module_systems</span><span style="color:#24292E;"> es6))</span></span></code></pre></div><p>What is the path of the <code>Hello.js</code> file generated by Melange?</p><details class="details custom-block"><summary>Solution</summary><p>The source file <code>foo/bar/Hello.re</code> would produce a <code>.js</code> file at:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">_build/default/foo/bar/dist/foo/bar/Hello.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">_build/default/foo/bar/dist/foo/bar/Hello.js</span></span></code></pre></div></details><hr><p>Source code for this chapter:</p><ul><li><a href="https://github.com/melange-re/melange-for-react-devs/tree/main/src" target="_blank" rel="noreferrer"><code>src</code> folder containing all projects</a></li><li><a href="https://github.com/melange-re/melange-for-react-devs/tree/main/src/counter" target="_blank" rel="noreferrer">Counter project</a></li><li><a href="https://github.com/melange-re/melange-for-react-devs/tree/main/src/celsius-converter-option" target="_blank" rel="noreferrer">Celsius Converter project</a></li></ul><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>The full list of files we’d need to create for every project would actually be <code>dune-project</code>, <code>.opam</code>, <code>package.json</code>, <code>index.html</code>, and <code>vite.config.js</code>. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>More details about how JSX gets translated can be found <a href="https://reasonml.github.io/docs/en/jsx#uncapitalized-tag" target="_blank" rel="noreferrer">here</a> and <a href="https://reasonml.github.io/reason-react/docs/en/jsx#uncapitalized" target="_blank" rel="noreferrer">here</a>. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,65),p=[o];function t(c,r,i,y,d,E){return n(),a("div",null,p)}const g=s(l,[["render",t]]);export{h as __pageData,g as default};
