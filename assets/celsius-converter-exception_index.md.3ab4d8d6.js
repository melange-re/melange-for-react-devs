import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.0e8ae64e.js";const g=JSON.parse('{"title":"Celsius Converter","description":"","frontmatter":{},"headers":[],"relativePath":"celsius-converter-exception/index.md","filePath":"celsius-converter-exception/index.md","lastUpdated":1716395778000}'),o={name:"celsius-converter-exception/index.md"},p=l(`<h1 id="celsius-converter" tabindex="-1">Celsius Converter <a class="header-anchor" href="#celsius-converter" aria-label="Permalink to &quot;Celsius Converter&quot;">​</a></h1><p>Our second widget will be one that takes a temperature value in Celsius and converts it to Fahrenheit. Create a new file called <code>CelsiusConverter.re</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">convert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> celsius </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">/.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">*.</span><span style="color:#E1E4E8;"> celsius </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">celsius</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setCelsius</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">useState(</span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">celsius</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newCelsius</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Event</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Form</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">target(evt)</span><span style="color:#FDAEB7;">##</span><span style="color:#E1E4E8;">value</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        setCelsius(_ </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> newCelsius)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">?°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> celsius </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">/.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">*.</span><span style="color:#24292E;"> celsius </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">celsius</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">setCelsius</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">useState(</span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">celsius</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">onChange</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newCelsius</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Event</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Form</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">target(evt)</span><span style="color:#B31D28;">##</span><span style="color:#24292E;">value</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">        setCelsius(_ </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> newCelsius)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">      }}</span></span>
<span class="line"><span style="color:#24292E;">    /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">?°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="js-t-object" tabindex="-1"><code>Js.t</code> object <a class="header-anchor" href="#js-t-object" aria-label="Permalink to &quot;\`Js.t\` object&quot;">​</a></h2><p>Inside the <code>input</code>’s <code>onChange</code> handler, we get the event target using <code>ReactEvent.Form.target</code>, which has the type <code>ReactEvent.Form.t =&gt; {_.. }</code>. What is <code>{_.. }</code>? It’s shorthand for the <code>Js.t({..})</code> type<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, which consists of two parts:</p><ul><li><code>Js.t</code> refers to JavaScript objects in Melange</li><li><code>{..}</code> refers to polymorphic objects which can contain any fields or methods</li></ul><p>Once we have a <code>Js.t</code> object, we can use the <code>##</code> operator to access its fields. But beware, because the compiler knows nothing about the types of those fields. For example, we could write <code>ReactEvent.Form.target(evt)##value + 1</code>, treating it as if it were an integer, and the compiler wouldn’t complain.</p><h2 id="wrap-functions-that-return-js-t" tabindex="-1">Wrap functions that return <code>Js.t</code> <a class="header-anchor" href="#wrap-functions-that-return-js-t" aria-label="Permalink to &quot;Wrap functions that return \`Js.t\`&quot;">​</a></h2><p>Instead of trusting ourselves to always use <code>ReactEvent.Form.target(evt)##value</code> correctly, it’s a good idea to wrap functions that return polymorphic objects into type-annotated helper functions. For example:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line highlighted"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getValueFromEvent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (evt)</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> string </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Event</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Form</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">target(evt)</span><span style="color:#FDAEB7;">##</span><span style="color:#E1E4E8;">value</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">convert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> celsius </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">/.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">*.</span><span style="color:#E1E4E8;"> celsius </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">celsius</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setCelsius</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">useState(</span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">celsius</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newCelsius</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getValueFromEvent(evt)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        setCelsius(_ </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> newCelsius)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">?°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line highlighted"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValueFromEvent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (evt)</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> string </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Event</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Form</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">target(evt)</span><span style="color:#B31D28;">##</span><span style="color:#24292E;">value</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> celsius </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">/.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">*.</span><span style="color:#24292E;"> celsius </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">celsius</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">setCelsius</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">useState(</span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">celsius</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">onChange</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newCelsius</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> getValueFromEvent(evt)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">        setCelsius(_ </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> newCelsius)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">      }}</span></span>
<span class="line"><span style="color:#24292E;">    /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">?°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The <code>: string</code> after the argument list tells the compiler that this function must return a <code>string</code>. Using the <code>getValueFromEvent</code> function ensures that the <code>value</code> field can’t be used as anything other than a string.</p><p>Another thing to note about <code>onChange</code> is that after the <code>evt</code> argument, the body of the callback function is surrounded by braces (<code>{}</code>). OCaml functions are like JavaScript’s arrow functions—if they contain more than one line, they need to be enclosed by braces.</p><h2 id="apply-pipe-last" tabindex="-1">Apply pipe last (<code>|&gt;</code>) <a class="header-anchor" href="#apply-pipe-last" aria-label="Permalink to &quot;Apply pipe last (\`|&gt;\`)&quot;">​</a></h2><p>Let’s change the render logic to update the Fahrenheit display based on the value of celsius:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  {celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> string_of_float </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line highlighted"><span style="color:#24292E;">  {celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> string_of_float </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The pipe last operator (<code>|&gt;</code>) is very handy here, allowing us to convert a string to float, then convert that float to another float (Celsius -&gt; Fahrenheit), convert back to string, and finally convert the string to <code>React.element</code>, all in one line.</p><h2 id="string-concatenation" tabindex="-1">String concatenation (<code>++</code>) <a class="header-anchor" href="#string-concatenation" aria-label="Permalink to &quot;String concatenation (\`++\`)&quot;">​</a></h2><p>We should probably put °F after the Fahrenheit value so that it’s clear to the user what unit of measure they’re seeing. We can do so using the string concatenation operator (<code>++</code>):</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  {(celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> string_of_float)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line highlighted"><span style="color:#24292E;">  {(celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> string_of_float)</span></span>
<span class="line highlighted"><span style="color:#24292E;">   </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line highlighted"><span style="color:#24292E;">   </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="catch-exception-with-switch" tabindex="-1">Catch exception with switch <a class="header-anchor" href="#catch-exception-with-switch" aria-label="Permalink to &quot;Catch exception with switch&quot;">​</a></h2><p>However, there’s a bug in this code: it will crash if you enter anything into the input that can’t be converted to a float. We can remedy this by catching the exception using a switch expression:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  {(</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">exception</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fahrenheit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> fahrenheit </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">   )</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line highlighted"><span style="color:#24292E;">  {(</span></span>
<span class="line highlighted"><span style="color:#24292E;">     </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">     </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">exception</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#24292E;">     </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fahrenheit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> fahrenheit </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line highlighted"><span style="color:#24292E;">     }</span></span>
<span class="line highlighted"><span style="color:#24292E;">   )</span></span>
<span class="line highlighted"><span style="color:#24292E;">   </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The <code>| exception _</code> branch will execute if there is any exception. The underscore (<code>_</code>) is a wildcard, meaning it will match any exception. If we wanted to be specific about which exception we want to catch, we could instead write</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  {(</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">exception</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Failure</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;error&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fahrenheit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> fahrenheit </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  {(</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">     </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">exception</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Failure</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;error&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fahrenheit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> fahrenheit </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="ternary-expression" tabindex="-1">Ternary expression <a class="header-anchor" href="#ternary-expression" aria-label="Permalink to &quot;Ternary expression&quot;">​</a></h2><p>Right now it correctly renders “error” when you enter an invalid value, but it also renders “error” if the input is blank. It might be bit more user-friendly to instead show “?°F” like before. We can do that by wrapping the switch expression in a ternary expression:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  {(</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     celsius </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;&quot;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       </span><span style="color:#FFAB70;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">?°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">exception</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fahrenheit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> fahrenheit </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">         }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       )</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  {(</span></span>
<span class="line highlighted"><span style="color:#24292E;">     celsius </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line highlighted"><span style="color:#24292E;">       </span><span style="color:#E36209;">?</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">?°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line highlighted"><span style="color:#24292E;">       </span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> (</span></span>
<span class="line highlighted"><span style="color:#24292E;">         </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">exception</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fahrenheit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> fahrenheit </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line highlighted"><span style="color:#24292E;">         }</span></span>
<span class="line highlighted"><span style="color:#24292E;">       )</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="if-else-expression" tabindex="-1">If-else expression <a class="header-anchor" href="#if-else-expression" aria-label="Permalink to &quot;If-else expression&quot;">​</a></h2><p>The ternary expression (<code>condition ? a : b</code>) works the same as in JavaScript. But in OCaml, it’s also shorthand for an if-else expression (<code>if (condition) { a; } else { b; }</code>). So we could rewrite it as this:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  {(</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (celsius </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">?°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#FDAEB7;">;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">exception</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fahrenheit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> fahrenheit </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">       }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  {(</span></span>
<span class="line highlighted"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (celsius </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">       </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">?°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#B31D28;">;</span></span>
<span class="line highlighted"><span style="color:#24292E;">     } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">       </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> string_of_float) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">exception</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fahrenheit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> fahrenheit </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line highlighted"><span style="color:#24292E;">       }</span><span style="color:#B31D28;">;</span></span>
<span class="line highlighted"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Unlike in JavaScript, the if-else construct is an expression and always yields a value. Both branches must return a value of the same type or you’ll get a compilation error. In practice, if-else expressions aren’t very common in OCaml code because in simple cases you can use ternary, and in more complex cases you can use switch. But it’s a nice, familiar fallback you can rely on when you haven’t quite gotten used to OCaml syntax yet.</p><h2 id="labeled-argument" tabindex="-1">Labeled argument <a class="header-anchor" href="#labeled-argument" aria-label="Permalink to &quot;Labeled argument&quot;">​</a></h2><p>If we enter a value with a lot of decimals in it, e.g. <code>21.1223456</code>, we’ll get a Fahrenheit value with a lot of decimals in it as well. We can limit the number of decimals in the converted value using <a href="https://melange.re/v4.0.0/api/re/melange/Js/Float/index.html#val-toFixed" target="_blank" rel="noreferrer">Js.Float.toFixed</a>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  {(</span></span>
<span class="line"><span style="color:#E1E4E8;">     celsius </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FFAB70;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">?°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">exception</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;error&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fahrenheit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toFixed(fahrenheit</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> ~digits</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  {(</span></span>
<span class="line"><span style="color:#24292E;">     celsius </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#E36209;">?</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">?°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> (</span></span>
<span class="line highlighted"><span style="color:#24292E;">         </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">exception</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;error&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fahrenheit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toFixed(fahrenheit</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> ~digits</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">       )</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p><code>Js.Float.toFixed</code> is a function that has one positional argument and one <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#labeled-arguments" target="_blank" rel="noreferrer">labeled argument</a>. In this case, the labeled argument is named <code>digits</code> and it’s receiving a value of <code>2</code>. It’s not possible to pass in the value of a labeled argument without using the <code>~label=value</code> syntax. We’ll see more of labeled arguments in the following chapters after we <a href="/order-confirmation/#item-make">introduce props</a>.</p><h2 id="partial-application" tabindex="-1">Partial application <a class="header-anchor" href="#partial-application" aria-label="Permalink to &quot;Partial application&quot;">​</a></h2><p>You might have noticed that the function chain feeding the switch expression got a bit shorter, from</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> string_of_float</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> string_of_float</span></span></code></pre></div><p>to</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">celsius </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">celsius </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert</span></span></code></pre></div><p>This happened because <code>string_of_float</code>, which takes a single argument, was replaced by <code>Js.Float.toFixed</code>, which takes two arguments, and functions chained using <code>|&gt;</code> can only take a single argument. But this one-argument restriction actually doesn’t prevent us from putting <code>Js.Float.toFixed</code> in the chain! We can take advantage of OCaml’s <a href="https://reasonml.github.io/docs/en/function#partial-application" target="_blank" rel="noreferrer">partial application</a> feature to create a one-argument function by writing <code>Js.Float.toFixed(~digits=2)</code>. Then our switch expression becomes</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°C = </span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  {(</span></span>
<span class="line"><span style="color:#E1E4E8;">     celsius </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FFAB70;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">?°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">           celsius</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> float_of_string</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> convert</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">           </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toFixed(~digits</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">exception</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fahrenheit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> fahrenheit </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">°F</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°C = </span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  {(</span></span>
<span class="line"><span style="color:#24292E;">     celsius </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#E36209;">?</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">?°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">           celsius</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> float_of_string</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> convert</span></span>
<span class="line highlighted"><span style="color:#24292E;">           </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toFixed(~digits</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         ) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">exception</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;error&quot;</span></span>
<span class="line highlighted"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fahrenheit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> fahrenheit </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">°F</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">       )</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="js-js-quoted-string-literal" tabindex="-1"><code>{js||js}</code> quoted string literal <a class="header-anchor" href="#js-js-quoted-string-literal" aria-label="Permalink to &quot;\`{js||js}\` quoted string literal&quot;">​</a></h2><p>Try changing <code>{js|°C = |js}</code> to <code>&quot;°C = &quot;</code>.</p><p>Changing it to <code>&quot;°C = &quot;</code> will result in a bit of gibberish being rendered in the browser: <code>Â°C</code>. We can’t rely on normal OCaml strings to <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#strings" target="_blank" rel="noreferrer">deal with Unicode correctly</a>, so any string that contains non-ASCII text must be delimited using <code>{js||js}</code> and not <code>&quot;&quot;</code>. This kind of string constant is called a <code>{js||js}</code> <em>quoted string literal</em> and it is specific to Melange, meaning it is not available in native OCaml.</p><hr><p>Nice, we have a working component now, but catching exceptions isn’t The OCaml Way! In the next chapter, you’ll see how to rewrite the logic using <code>option</code>.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li><code>Js.t</code> objects (with the type <code>Js.t({..})</code>) can have fields of any name and type. <ul><li>You access fields of a <code>Js.t</code> object using the <code>##</code> operator.</li><li>You can use type annotations to make the use of such objects safer.</li></ul></li><li>Concatenate strings using the <code>++</code> operator.</li><li>Switch expressions can be used to catch exceptions.</li><li>Ternary expressions have the same syntax as in JS. Unlike in JS, they are also shorthand for if-else expressions.</li><li>The two branches of if-else expressions must return values of the same type.</li><li>Besides positional arguments, OCaml functions can also have labeled arguments.</li><li>If a function takes two arguments, we can supply one of them and get a function that takes only one argument. This is called partial application.</li><li>You must use a <code>{js||js}</code> quoted string literal for string constants that contain Unicode characters</li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> It’s possible to rewrite the <code>onChange</code> callback to be a one-liner:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">celsius</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newCelsius</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Event</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Form</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">target(evt)</span><span style="color:#FDAEB7;">##</span><span style="color:#E1E4E8;">value</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">    setCelsius(_ </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> newCelsius)</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    setCelsius(_ </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> getValueFromEvent(evt))</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  }}</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">celsius</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onChange</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line diff remove"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newCelsius</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Event</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Form</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">target(evt)</span><span style="color:#B31D28;">##</span><span style="color:#24292E;">value</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line diff remove"><span style="color:#24292E;">    setCelsius(_ </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> newCelsius)</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line diff add"><span style="color:#24292E;">    setCelsius(_ </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> getValueFromEvent(evt))</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  }}</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>This compiles, but it now contains a hidden bug. Do you know what silent error might occur?</p><details class="details custom-block"><summary>Hint</summary><p>The <code>getValueFromEvent</code> function is no longer being invoked in the same scope as before.</p></details><details class="details custom-block"><summary>Solution</summary><p>Rewriting the <code>onChange</code> handler to use a single expression creates a potential problem with stale values coming from the event object:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">celsius</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{evt </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    setCelsius(_ </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#6A737D;">      // we are no longer in the scope of onChange</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      getValueFromEvent(evt)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">celsius</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onChange</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{evt </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    setCelsius(_ </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#6A737D;">      // we are no longer in the scope of onChange</span></span>
<span class="line highlighted"><span style="color:#24292E;">      getValueFromEvent(evt)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Inside of <code>onChange</code>, we can expect the function <code>getValueFromEvent(evt)</code> to return the latest value of the <code>input</code>. However, we are now calling <code>getValueFromEvent(evt)</code> from a different function—the callback we pass to <code>setCelsius</code>! By the time that <code>setCelsius</code>’s callback is invoked, the <code>evt</code> object might have been recycled and no longer have the same value as when <code>onChange</code> was initially invoked. For more details about this, see <a href="https://reasonml.github.io/reason-react/docs/en/usestate-event-value" target="_blank" rel="noreferrer">Using Event Values with useState</a> in the <a href="https://reasonml.github.io/reason-react/" target="_blank" rel="noreferrer">ReasonReact</a> docs.</p></details><p><b>2.</b> It’s possible to use partial application with most functions in OCaml, even operators. Take a look at the following program:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addFive</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FDAEB7;">+</span><span style="color:#E1E4E8;">)(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(addFive(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(addFive(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">))</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(addFive(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">))</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFive</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#B31D28;">+</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(addFive(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(addFive(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">))</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(addFive(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>What do you think it outputs? Run it in <a href="https://melange.re/v4.0.0/playground" target="_blank" rel="noreferrer">Melange Playground</a> to confirm your hypothesis.</p><details class="details custom-block"><summary>Solution</summary><p>Playground: <a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=bGV0IGFkZEZpdmUgPSAoKykoNSk7CkpzLmxvZyhhZGRGaXZlKDIpKTsKSnMubG9nKGFkZEZpdmUoNykpOwpKcy5sb2coYWRkRml2ZSgxMCkpOw%3D%3D&amp;live=off" target="_blank" rel="noreferrer">Define an addFive function using partial application</a></p></details><p><b>3.</b> Use the pipe last operator (<code>|&gt;</code>) and partial application to write a function that takes an integer argument <code>x</code>, subtracts <code>x</code> from 10, and converts that result to binary.</p><details class="details custom-block"><summary>Hint</summary><p>Use the <a href="https://melange.re/v4.0.0/api/re/melange/Js/Int/#val-toString" target="_blank" rel="noreferrer">Js.Int.toString</a> function.</p></details><details class="details custom-block"><summary>Solution</summary><p>Playground: <a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=bGV0IGNvb2xGdW5jdGlvbiA9IHggPT4geCB8PiAoKC0pKDEwKSkgfD4gSnMuSW50LnRvU3RyaW5nKH5yYWRpeD0yKTsKSnMubG9nKGNvb2xGdW5jdGlvbigxKSk7CkpzLmxvZyhjb29sRnVuY3Rpb24oNSkpOw%3D%3D&amp;live=off" target="_blank" rel="noreferrer">Define a function that subtracts from 10 and converts to binary</a></p></details><hr><p>View <a href="https://github.com/melange-re/melange-for-react-devs/blob/main/src/celsius-converter-exception/" target="_blank" rel="noreferrer">source code</a> and <a href="https://react-book.melange.re/demo/src/celsius-converter-exception/" target="_blank" rel="noreferrer">demo</a> for this chapter.</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>See <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#using-js-t-objects" target="_blank" rel="noreferrer">Using Js.t objects</a> for more details. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,67),e=[p];function t(c,r,y,E,i,h){return n(),a("div",null,e)}const D=s(o,[["render",t]]);export{g as __pageData,D as default};
