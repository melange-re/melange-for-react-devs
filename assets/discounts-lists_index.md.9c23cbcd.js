import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const o="/assets/function-popup.4539f81c.png",D=JSON.parse('{"title":"Discounts Using Lists","description":"","frontmatter":{},"headers":[],"relativePath":"discounts-lists/index.md","filePath":"discounts-lists/index.md","lastUpdated":1718989630000}'),p={name:"discounts-lists/index.md"},e=l(`<h1 id="discounts-using-lists" tabindex="-1">Discounts Using Lists <a class="header-anchor" href="#discounts-using-lists" aria-label="Permalink to &quot;Discounts Using Lists&quot;">​</a></h1><p>You’ve implemented the logic for the burger discounts that will be applied on International Burger Day, but something feels off. The code inside the <code>Discount</code> module is safe, in the sense that it doesn’t raise exceptions, so when it’s used in the app, it won’t crash. But the current logic in <code>Discount.getFreeBurger</code> is a little fragile, since you have to remember to not change the order of function invocations in such a way that the function will <a href="/burger-discounts/#arrays-are-mutable">accidentally change the input array</a>. You have a test in <code>DiscountTests</code> which tests for that possibility, but you know that tests are only as reliable as the humans that maintain them. By now, you’ve come to realize that The OCaml Way should be to rewrite the function so that it <strong>cannot</strong> have side effects.</p><h2 id="introduction-to-lists" tabindex="-1">Introduction to lists <a class="header-anchor" href="#introduction-to-lists" aria-label="Permalink to &quot;Introduction to lists&quot;">​</a></h2><p>A <a href="https://reasonml.github.io/docs/en/basic-structures#list" target="_blank" rel="noreferrer">list</a> is a sequential data structure that can often be used in place of an array. In OCaml, lists are implemented as <a href="https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list" target="_blank" rel="noreferrer">singly-linked lists</a>. The main limitation is that they don’t allow constant-time access to any element except the first one (also known as the <em>head</em> of a list). Most operations on lists go through the <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/" target="_blank" rel="noreferrer">Stdlib.List module</a>, which has many functions that are equivalent to the ones you’ve already used in <a href="https://melange.re/v4.0.0/api/re/melange/Js/Array/" target="_blank" rel="noreferrer">Js.Array</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Since <code>Stdlib</code> is opened by default, you can access all <code>Stdlib.List</code> functions using just <code>List</code>, e.g. <code>List.map</code>, <code>List.filter</code>, etc. Because of this, we’ll refer to this module as <code>List</code> from now on.</p></div><h2 id="refactor-discount-getfreeburger" tabindex="-1">Refactor <code>Discount.getFreeBurger</code> <a class="header-anchor" href="#refactor-discount-getfreeburger" aria-label="Permalink to &quot;Refactor \`Discount.getFreeBurger\`&quot;">​</a></h2><p>Let’s refactor <code>Discount.getFreeBurger</code> to accept <code>list(Item.t)</code> instead of <code>array(Item.t)</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** Buy 2 burgers, get 1 free */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFreeBurger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prices</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">filter(item </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">sort((x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> compare(x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y))</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (prices) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[</span><span style="color:#6A737D;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[</span><span style="color:#6A737D;">_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cheaperPrice</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#6A737D;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(cheaperPrice)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** Buy 2 burgers, get 1 free */</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFreeBurger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prices</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">filter(item </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (item) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">       )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">sort((x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> compare(x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y))</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (prices) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[</span><span style="color:#6A737D;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[</span><span style="color:#6A737D;">_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cheaperPrice</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#6A737D;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(cheaperPrice)</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>There are a lot of things to talk about in this piece of code—let’s go through them one by one.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This refactor makes sense because the logic inside <code>Discount.getFreeBurger</code> doesn’t need to access random positions within the sequence of items. If that was the case, then it would be better to keep using arrays.</p></div><h2 id="documentation-comment" tabindex="-1">Documentation comment <a class="header-anchor" href="#documentation-comment" aria-label="Permalink to &quot;Documentation comment&quot;">​</a></h2><p>You might have noticed that the comment at the beginning of the function has a different format than before:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line diff remove"><span style="color:#6A737D;">// Buy 2 burgers, get 1 free </span></span>
<span class="line diff add"><span style="color:#6A737D;">/** Buy 2 burgers, get 1 free */</span><span style="color:#E1E4E8;"> </span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line diff remove"><span style="color:#6A737D;">// Buy 2 burgers, get 1 free </span></span>
<span class="line diff add"><span style="color:#6A737D;">/** Buy 2 burgers, get 1 free */</span><span style="color:#24292E;"> </span></span></code></pre></div><p>This is a <strong>documentation comment</strong>, a special comment that is attached to the function it appears above. Go to <code>DiscountTests</code> and hover over an invocation of <code>getFreeBurger</code>—the editor will display a popup showing both the type signature and documentation comment of this function:</p><p><img src="`+o+`" alt="Function info popup"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>By “editor”, we mean an instance of Visual Studio Code that has the <a href="https://marketplace.visualstudio.com/items?itemName=ocamllabs.ocaml-platform" target="_blank" rel="noreferrer">OCaml Platform extension</a> installed. Other editors that have OCaml support probably have the same (or very similar) features, but we don’t guarantee it.</p></div><p>Documentation comments can also be attached to modules, types, and variables. Besides showing up in editor popups, they are also consumed by documentation generators like <a href="https://ocaml.github.io/odoc/" target="_blank" rel="noreferrer">odoc</a>.</p><h2 id="list-functions" tabindex="-1"><code>List</code> functions <a class="header-anchor" href="#list-functions" aria-label="Permalink to &quot;\`List\` functions&quot;">​</a></h2><p>We replaced these functions with their counterparts in the <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/" target="_blank" rel="noreferrer">List module</a>:</p><ul><li><code>Js.Array.filter</code> → <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-filter" target="_blank" rel="noreferrer">List.filter</a>. Note that <code>List.filter</code> doesn’t accept the labeled argument <code>~f</code>, because the functions inside <code>List</code> don’t use labeled arguments.</li><li><code>Js.Array.map</code> → <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-map" target="_blank" rel="noreferrer">List.map</a>. <code>List.map</code> also doesn’t accept the labeled argument <code>~f</code>.</li><li><code>Js.Array.sortInPlaceWith</code> → <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-sort" target="_blank" rel="noreferrer">List.sort</a>. <code>List.sort</code> returns a brand new list, because, unlike <code>Js.Array.sortInPlaceWith</code>, it doesn’t modify its argument (and it can’t, since lists are immutable).</li></ul><h2 id="pattern-match-on-lists" tabindex="-1">Pattern match on lists <a class="header-anchor" href="#pattern-match-on-lists" aria-label="Permalink to &quot;Pattern match on lists&quot;">​</a></h2><p>The switch expression in <code>Discount.getFreeBurgers</code> accepts the entire <code>prices</code> list. Unlike with arrays, we can pattern match on lists even if we don’t know the length of the list.</p><p>Inside the “failure” branch of the switch expression, we see this:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">| </span><span style="color:#79B8FF;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">| </span><span style="color:#79B8FF;">[</span><span style="color:#E1E4E8;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">| </span><span style="color:#005CC5;">[]</span></span>
<span class="line"><span style="color:#24292E;">| </span><span style="color:#005CC5;">[</span><span style="color:#24292E;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span></code></pre></div><p>This pattern matches both empty lists and lists with one element, and returns <code>None</code>.</p><p>Inside the “success” branch of the switch expression, we have:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">| </span><span style="color:#79B8FF;">[</span><span style="color:#E1E4E8;">_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> cheaperPrice</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(cheaperPrice)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">| </span><span style="color:#005CC5;">[</span><span style="color:#24292E;">_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> cheaperPrice</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(cheaperPrice)</span></span></code></pre></div><p>This pattern will match on lists that have at least two elements. The first element is ignored via the wildcard pattern <code>_</code>. The second element is bound to the name <code>cheaperPrice</code>, which is encased in <code>Some</code> and returned. We use <em>list spread syntax</em> (<code>...</code>) to indicate that the list can have more than the two elements we explicitly matched on.</p><h2 id="list-spread-syntax" tabindex="-1">List spread syntax <a class="header-anchor" href="#list-spread-syntax" aria-label="Permalink to &quot;List spread syntax&quot;">​</a></h2><p>The spread operator (<code>...</code>) can also be used to create a new list by prepending elements to an existing list:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[1</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3]</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">[0</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">list</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// [0, 1, 2, 3]</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#79B8FF;">[</span><span style="color:#FDAEB7;">-</span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">list</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// [-1, 0, 1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[1</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3]</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">[0</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">list</span><span style="color:#005CC5;">]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// [0, 1, 2, 3]</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#005CC5;">[</span><span style="color:#B31D28;">-</span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">list</span><span style="color:#005CC5;">]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// [-1, 0, 1, 2, 3]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">[1</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">[1</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3]</span></span></code></pre></div><p>is really just a shortcut for</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">[1</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">[2</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">[3</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">[]]]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">[1</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">[2</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">[3</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">[]]]]</span></span></code></pre></div></div><p>When pattern matching, the spread operator allows you to bind the <em>tail</em> of a list to a name:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">[1</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3]</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[</span><span style="color:#6A737D;">_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">tail]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(tail) </span><span style="color:#6A737D;">// [2, 3]</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">[1</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3]</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[</span><span style="color:#6A737D;">_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">tail]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(tail) </span><span style="color:#6A737D;">// []</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">[1</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3]</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[</span><span style="color:#6A737D;">_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">tail]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(tail) </span><span style="color:#6A737D;">// [2, 3]</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">[1</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3]</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[</span><span style="color:#6A737D;">_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">tail]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(tail) </span><span style="color:#6A737D;">// []</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The tail of the list is the sublist that remains after you extract the first n elements from the front of the list. As you can see, the tail might be the empty list (<code>[]</code>). In practice, you don’t need to bind the tail to a name unless you’re writing a <a href="/todo.html">custom list function</a>. Often, you’ll just bind the tail to the wildcard pattern <code>_</code>, effectively ignoring it:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">[</span><span style="color:#DBEDFF;">&quot;one&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;two&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;three&quot;</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[a</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#6A737D;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(a </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;, &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> b </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;, etc&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// one, two, etc</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">[</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#005CC5;">]</span><span style="color:#24292E;">) {</span></span>
<span class="line highlighted"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[a</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#6A737D;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(a </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> b </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, etc&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// one, two, etc</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="runtime-representation-of-lists" tabindex="-1">Runtime representation of lists <a class="header-anchor" href="#runtime-representation-of-lists" aria-label="Permalink to &quot;Runtime representation of lists&quot;">​</a></h2><p>Run this snippet in <a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=SnMubG9nMyhBcnJheS5vZl9saXN0KFtdKSwgIi0%2BIiwgW10pOwpKcy5sb2czKEFycmF5Lm9mX2xpc3QoWzQyXSksICItPiIsIFs0Ml0pOwpKcy5sb2czKEFycmF5Lm9mX2xpc3QoWzQsIDUsIDZdKSwgIi0%2BIiwgWzQsIDUsIDZdKTsK&amp;live=off" target="_blank" rel="noreferrer">Melange Playground</a>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log3(</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">of_list(</span><span style="color:#79B8FF;">[]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;-&gt;&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log3(</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">of_list(</span><span style="color:#79B8FF;">[42]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;-&gt;&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[42]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log3(</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">of_list(</span><span style="color:#79B8FF;">[4</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;-&gt;&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[4</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log3(</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">of_list(</span><span style="color:#005CC5;">[]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&gt;&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log3(</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">of_list(</span><span style="color:#005CC5;">[42]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&gt;&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[42]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log3(</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">of_list(</span><span style="color:#005CC5;">[4</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&gt;&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[4</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>You’ll see this output:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[] -&gt; 0</span></span>
<span class="line"><span style="color:#e1e4e8;">[42] -&gt; {&quot;hd&quot;:42,&quot;tl&quot;:0}</span></span>
<span class="line"><span style="color:#e1e4e8;">[4,5,6] -&gt; {&quot;hd&quot;:4,&quot;tl&quot;:{&quot;hd&quot;:5,&quot;tl&quot;:{&quot;hd&quot;:6,&quot;tl&quot;:0}}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[] -&gt; 0</span></span>
<span class="line"><span style="color:#24292e;">[42] -&gt; {&quot;hd&quot;:42,&quot;tl&quot;:0}</span></span>
<span class="line"><span style="color:#24292e;">[4,5,6] -&gt; {&quot;hd&quot;:4,&quot;tl&quot;:{&quot;hd&quot;:5,&quot;tl&quot;:{&quot;hd&quot;:6,&quot;tl&quot;:0}}}</span></span></code></pre></div><p>The list <code>[4, 5, 6]</code> becomes this object in the JS runtime (pretty printed for readability):</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;hd&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;tl&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;hd&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;tl&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;hd&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;tl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;hd&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;tl&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;hd&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;tl&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;hd&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;tl&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>An empty list in the JS runtime is represented by <code>0</code>. A non-empty list is represented by an object with fields <code>hd</code> (for the head) and <code>tl</code> (for the tail).</p><h2 id="fix-tests-for-discount-getfreeburger" tabindex="-1">Fix tests for <code>Discount.getFreeBurger</code> <a class="header-anchor" href="#fix-tests-for-discount-getfreeburger" aria-label="Permalink to &quot;Fix tests for \`Discount.getFreeBurger\`&quot;">​</a></h2><p>You should be getting this compilation error for <code>DiscountTests</code>:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File &quot;src/order-confirmation/DiscountTests.re&quot;, lines 15-19, characters 32-11:</span></span>
<span class="line"><span style="color:#e1e4e8;">15 | ................................[|</span></span>
<span class="line"><span style="color:#e1e4e8;">16 |            Hotdog,</span></span>
<span class="line"><span style="color:#e1e4e8;">17 |            Sandwich(Ham),</span></span>
<span class="line"><span style="color:#e1e4e8;">18 |            Sandwich(Turducken),</span></span>
<span class="line"><span style="color:#e1e4e8;">19 |          |]..</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: This expression has type &#39;a array</span></span>
<span class="line"><span style="color:#e1e4e8;">       but an expression was expected of type Item.t list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File &quot;src/order-confirmation/DiscountTests.re&quot;, lines 15-19, characters 32-11:</span></span>
<span class="line"><span style="color:#24292e;">15 | ................................[|</span></span>
<span class="line"><span style="color:#24292e;">16 |            Hotdog,</span></span>
<span class="line"><span style="color:#24292e;">17 |            Sandwich(Ham),</span></span>
<span class="line"><span style="color:#24292e;">18 |            Sandwich(Turducken),</span></span>
<span class="line"><span style="color:#24292e;">19 |          |]..</span></span>
<span class="line"><span style="color:#24292e;">Error: This expression has type &#39;a array</span></span>
<span class="line"><span style="color:#24292e;">       but an expression was expected of type Item.t list</span></span></code></pre></div><p>It’s simple to fix—just change the delimiters from <code>[||]</code> to <code>[]</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;0 burgers, no discount&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> equal(</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">Discount</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">getFreeBurger(</span><span style="color:#79B8FF;">[Hotdog</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Ham</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Turducken</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">None</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;0 burgers, no discount&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> equal(</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">Discount</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">getFreeBurger(</span><span style="color:#005CC5;">[Hotdog</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Ham</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Turducken</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">None</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The “Input array isn’t changed” test can simply be deleted, because lists are immutable and therefore <code>Discount.getBurger</code> can’t change its input list.</p><h2 id="refactor-discount-gethalfoff" tabindex="-1">Refactor <code>Discount.getHalfOff</code> <a class="header-anchor" href="#refactor-discount-gethalfoff" aria-label="Permalink to &quot;Refactor \`Discount.getHalfOff\`&quot;">​</a></h2><p>Let’s now refactor <code>Discount.getHalfOff</code> to use lists:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** Buy 1+ burger with 1+ of every topping, get half off */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHalfOff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">meetsCondition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">exists(</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">fun</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">({</span><span style="color:#B392F0;">lettuce</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tomatoes</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onions</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cheese</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bacon</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">when</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">onions</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">cheese</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">bacon</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (meetsCondition) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      items</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">fold_left((total</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> total </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(item)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(total </span><span style="color:#FDAEB7;">/.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** Buy 1+ burger with 1+ of every topping, get half off */</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHalfOff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">meetsCondition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">exists(</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">fun</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">({</span><span style="color:#6F42C1;">lettuce</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tomatoes</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onions</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cheese</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bacon</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#005CC5;">when</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">onions</span><span style="color:#24292E;"> &gt; </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">cheese</span><span style="color:#24292E;"> &gt; </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">bacon</span><span style="color:#24292E;"> &gt; </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (meetsCondition) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      items</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">fold_left((total</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> total </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(item)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(total </span><span style="color:#B31D28;">/.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Again, we swap out array functions for list functions:</p><ul><li><code>Js.Array.some</code> → <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-exists" target="_blank" rel="noreferrer">List.exists</a>. Note that this is one of several functions in <code>List</code> that have different names than their counterparts in <code>Js.Array</code>.</li><li><code>Js.Array.reduce</code> → <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-fold_left" target="_blank" rel="noreferrer">List.fold_left</a>. Despite its name, <code>fold_left</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> has the same meaning as <code>reduce</code>.</li></ul><p>Remember to fix the <code>Discount.getHalfOff</code> tests inside <code>DiscountTests</code>, and then all your code should be compiling once more.</p><h2 id="listlabels-module" tabindex="-1"><code>ListLabels</code> module <a class="header-anchor" href="#listlabels-module" aria-label="Permalink to &quot;\`ListLabels\` module&quot;">​</a></h2><p>The call to <code>List.fold_left</code> is not as readable as the previous version using <code>Js.Array.reduce</code>, but its readability can be improved by instead using <a href="https://melange.re/v1.0.0/api/re/melange/Stdlib/ListLabels/#val-fold_left" target="_blank" rel="noreferrer">ListLabels.fold_left</a>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  items</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">fold_left((total</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> total </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(item)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListLabels</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">fold_left(~init</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> ~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(total</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">           total </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(item) </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">         )</span><span style="color:#FDAEB7;">;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(total </span><span style="color:#FDAEB7;">/.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  items</span></span>
<span class="line diff remove"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">fold_left((total</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> total </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(item)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line diff add"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListLabels</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">fold_left(~init</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> ~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(total</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line diff add"><span style="color:#24292E;">           total </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(item) </span></span>
<span class="line diff add"><span style="color:#24292E;">         )</span><span style="color:#B31D28;">;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(total </span><span style="color:#B31D28;">/.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The <a href="https://melange.re/v1.0.0/api/re/melange/Stdlib/ListLabels/" target="_blank" rel="noreferrer">ListLabels</a> module has all the functions found in <code>List</code>, but many of them take labeled arguments instead of positional arguments.</p><h2 id="refactor-order-component" tabindex="-1">Refactor <code>Order</code> component <a class="header-anchor" href="#refactor-order-component" aria-label="Permalink to &quot;Refactor \`Order\` component&quot;">​</a></h2><p>Because we’ve gone all in on lists, we have to migrate the component modules as well. Next up is <code>Order</code>. Start off by changing the type of <code>Order.t</code> from <code>array(Item.t)</code> to <code>list(Item.t)</code>, then refactor <code>Order.make</code> accordingly:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListLabels</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">fold_left(~init</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(acc</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> order) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         acc </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(order)</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">css##</span><span style="color:#B392F0;">order</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {items</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">mapi((index</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> item) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#DBEDFF;">&quot;item-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> string_of_int(index)} </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          )</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Stdlib</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">of_list</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">css##</span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Total&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {total </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListLabels</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">fold_left(~init</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(acc</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> order) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         acc </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(order)</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">table</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">css##</span><span style="color:#6F42C1;">order</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {items</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">mapi((index</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> item) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;item-&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> string_of_int(index)} </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">          )</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stdlib</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">of_list</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">css##</span><span style="color:#6F42C1;">total</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Total&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {total </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Again, we’re mostly just replacing array functions with list functions:</p><ul><li><code>Js.Array.reduce</code> → <code>ListLabels.fold_left</code></li><li><code>Js.Array.mapi</code> → <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-mapi" target="_blank" rel="noreferrer">List.mapi</a>. Note that the order of the callback arguments has been reversed. For <code>Js.Array.mapi</code> it’s <code>(item, index)</code>, but for <code>List.mapi</code> it’s <code>(index, item)</code>.</li><li>We have to add a call to <a href="https://melange.re/v2.2.0/api/re/melange/Stdlib/Array/#val-of_list" target="_blank" rel="noreferrer">Stdlib.Array.of_list</a> in between the calls to <code>List.mapi</code> and <code>React.array</code> to convert the list to an array. Whenever we want to render a list of <code>React.element</code>s, we must first convert it to an array of <code>React.element</code>s. To understand why, recall that a list is just an object in the JS runtime, and React cannot directly render objects.</li></ul><p>Because <code>Stdlib</code> is automatically opened, normally we can just call <code>Array.of_list</code>, but we have to use the full name <code>Stdlib.Array.of_list</code> because our custom <code>Array</code> module takes precedence<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p><p>To get all your code compiling again, you must also fix the code in <code>Index</code>—but all you have to do in there is change the array delimiters (<code>[||]</code>) to list delimiters (<code>[]</code>).</p><h2 id="list-nth-opt" tabindex="-1"><code>List.nth_opt</code> <a class="header-anchor" href="#list-nth-opt" aria-label="Permalink to &quot;\`List.nth_opt\`&quot;">​</a></h2><p>If we peruse the <code>List</code> module a bit, we’ll find a function that can simplify the logic in <code>Discount.getFreeBurger</code>: <a href="https://melange.re/v1.0.0/api/re/melange/Stdlib/List/#val-nth" target="_blank" rel="noreferrer">List.nth</a>. It takes an index <code>n</code> that returns the <code>n</code>-th element of a list. However, from previous experience, we don’t want to use unsafe functions like this. Fortunately, there’s a similar <a href="https://melange.re/v1.0.0/api/re/melange/Stdlib/List/#val-nth_opt" target="_blank" rel="noreferrer">List.nth_opt</a> function that does the same thing but is safer because it returns <code>option</code> instead of raising an exception. Let’s refactor <code>Discount.getFreeBurger</code> to use it:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFreeBurger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  items</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">filter(item </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">sort((x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> compare(x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">nth_opt(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFreeBurger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  items</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">filter(item </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (item) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">sort((x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> compare(x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">nth_opt(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>By using <code>List.nth_opt</code>, we can simplify the function to a single expression. However, we get a compilation error:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File &quot;docs/order-confirmation/Discount.re&quot;, line 61, characters 18-19:</span></span>
<span class="line"><span style="color:#e1e4e8;">61 |   |&gt; List.nth_opt(1);</span></span>
<span class="line"><span style="color:#e1e4e8;">                       ^</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: This expression has type int but an expression was expected of type</span></span>
<span class="line"><span style="color:#e1e4e8;">         &#39;a list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File &quot;docs/order-confirmation/Discount.re&quot;, line 61, characters 18-19:</span></span>
<span class="line"><span style="color:#24292e;">61 |   |&gt; List.nth_opt(1);</span></span>
<span class="line"><span style="color:#24292e;">                       ^</span></span>
<span class="line"><span style="color:#24292e;">Error: This expression has type int but an expression was expected of type</span></span>
<span class="line"><span style="color:#24292e;">         &#39;a list</span></span></code></pre></div><h2 id="placeholder-operator" tabindex="-1">Placeholder operator <a class="header-anchor" href="#placeholder-operator" aria-label="Permalink to &quot;Placeholder operator&quot;">​</a></h2><p>This is because the type signature of <code>List.nth_opt</code> is</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">list(&#39;a) =&gt; int =&gt; option(&#39;a)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">list(&#39;a) =&gt; int =&gt; option(&#39;a)</span></span></code></pre></div><p>That is, it accepts the list as the first argument, not the last. Recall that the pipe last operator (<code>|&gt;</code>) pipes values into the last argument of a function. However, there’s a way to override the placement of the argument:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">nth_opt(_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">nth_opt(_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Do not confuse the <code>_</code> here for wildcard, here it’s a placeholder for where the argument should go. When we put <code>_</code> in the first argument position, it overrides the default behavior of the pipe last operator. Run <code>npm run test</code> to confirm that <code>Discount.getFreeBurger</code> works the same as before.</p><h1 id="list-nth-opt-is-unsafe" tabindex="-1"><code>List.nth_opt</code> is unsafe <a class="header-anchor" href="#list-nth-opt-is-unsafe" aria-label="Permalink to &quot;\`List.nth_opt\` is unsafe&quot;">​</a></h1><p>The problem with using <code>List.nth_opt</code> is that it can still raise an <code>Invalid_argument</code> exception if the value of <code>n</code> is negative. You can confirm this by hovering over <code>nth_opt</code> and reading the popup or <a href="https://melange.re/v1.0.0/api/re/melange/Stdlib/List/#val-nth_opt" target="_blank" rel="noreferrer">read its documentation</a>. While this is unlikely to cause a problem inside <code>Discount.getFreeBurger</code>, it’s best to avoid unsafe functions except in special circumstances, for example if a function needs to be as fast as possible. Of course, it’s possible to implement a completely safe version of <code>nth_opt</code>, which is an exercise at the end of this chapter.</p><hr><p>Mazel tov! You’ve implemented the burger discounts in a way that is more maintainable, and you’ve also learned a lot about lists along the way. In the next chapter, we’ll finally use the discount logic to reduce the final price of an order.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>Lists are immutable</li><li>You can pattern match on a whole list, even if you don’t know its length</li><li>Uses of list spread syntax (<code>...</code>): <ul><li>Create new lists by prepending elements to existing lists</li><li>Pattern match on the tail of a list</li></ul></li><li>The delimiters for list literals are <code>[]</code></li><li>The <code>List</code> module contains most of the functions you’ll need for dealing with lists</li><li>The <code>ListLabels</code> module contains the same functions as in <code>List</code>, but they have labeled arguments instead of positional arguments</li><li>The names of equivalent functions in <code>List</code> and <code>Js.Array</code> might not match</li><li>The runtime representation of lists: <ul><li>Empty list → <code>0</code></li><li>Nonempty list → a JavaScript object with the fields <code>hd</code> (for head) and <code>tl</code> (for tail)</li></ul></li><li>Documentation comments: <ul><li>Show up in editor hover popups and generated documentation pages</li><li>Can be attached to functions, modules, types, and variables</li></ul></li><li>The placeholder operator (<code>_</code>) can be used to override the position of the piped argument when using the pipe last operator</li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> There are a couple ways to improve <code>Discount.getFreeBurger</code>:</p><ul><li>Instead of <code>StdLib.compare</code>, use a type-specific compare function to make the code less brittle. Examples of type-specific compare functions are <code>Bool.compare</code> and <code>String.compare</code>.</li><li>Use <a href="https://melange.re/v2.2.0/api/re/melange/Stdlib/List/#val-filter_map" target="_blank" rel="noreferrer">List.filter_map</a> in place of <code>List.filter</code> and <code>List.map</code>.</li></ul><details class="details custom-block"><summary>Solution</summary><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** Buy 2 burgers, get 1 free */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFreeBurger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prices</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">filter_map(item </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">burger</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Burger</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(burger))</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">sort((x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">compare(x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y))</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (prices) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[</span><span style="color:#6A737D;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[</span><span style="color:#6A737D;">_</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cheaperPrice</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#6A737D;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(cheaperPrice)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** Buy 2 burgers, get 1 free */</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFreeBurger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prices</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">filter_map(item </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (item) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">burger</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Burger</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(burger))</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">       )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">sort((x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">compare(x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y))</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (prices) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[</span><span style="color:#6A737D;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[</span><span style="color:#6A737D;">_</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cheaperPrice</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#6A737D;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(cheaperPrice)</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Prefer type-specific compare functions like <a href="https://melange.re/v1.0.0/api/re/melange/Stdlib/Float/#val-compare" target="_blank" rel="noreferrer">Float.compare</a> over polymorphic <code>Stdlib.compare</code>. While <code>Stdlib.compare</code> can handle any type, its flexibility comes with drawbacks. It can be slower due to its polymorphic nature, and might not always offer meaningful comparisons for complex types. Additionally, it can raise exceptions if used on non-comparable types like functions.</p></details><p><b>2.</b> Add a <code>ListSafe.nth</code> function which safely returns the nth element of a list encased in <code>Some</code>. If the nth element doesn’t exist, return <code>None</code>. Make sure the function can be used with the pipe last operator without the use of the placeholder operator. Refactor <code>Discount.getFreeBurger</code> to use your new function.</p><details class="details custom-block"><summary>Solution</summary><p>Add a new file <code>ListSafe.re</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** Return the nth element encased in Some; if it doesn&#39;t exist, return None */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (n</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> list) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> n </span><span style="color:#FDAEB7;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">nth_opt(list</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> n)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** Return the nth element encased in Some; if it doesn&#39;t exist, return None */</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (n</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> list) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> n </span><span style="color:#B31D28;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">nth_opt(list</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> n)</span><span style="color:#B31D28;">;</span></span></code></pre></div><p><code>Discount.getFreeBurger</code> could be refactored to:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFreeBurger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  items</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">filter(item </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">sort((x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">compare(x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y))</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListSafe</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">nth(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFreeBurger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  items</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">filter(item </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (item) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">sort((x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">compare(x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y))</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListSafe</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">nth(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Note that we no longer need the switch expression anymore because <code>ListSafe.nth(1)</code> will automatically return <code>None</code> if there are 0 or 1 items in the given list.</p></details><p><b>3.</b> Update the logic of <code>Discount.getFreeBurger</code> so that for every pair of burgers purchased, one of them is free. Order the burgers by price (descending), and then choose every other burger (starting from the second burger) to be free. Add this new test to <code>DiscountTests</code> and make sure it passes:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test(</span><span style="color:#DBEDFF;">&quot;7 burgers, return Some(46.75)&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  expect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> equal(</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">Discount</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">getFreeBurgers(</span><span style="color:#79B8FF;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(burger)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">burger</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">cheese</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 15.50</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Unicorn</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">burger</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">bacon</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 17.00</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">burger</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">tomatoes</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">cheese</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 15.15</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Ham</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">burger</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">bacon</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 16.00</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">burger</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">onions</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         })</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 16.20</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Portabello</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">burger</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">tomatoes</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         }) </span><span style="color:#6A737D;">// 15.05</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">46</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test(</span><span style="color:#032F62;">&quot;7 burgers, return Some(46.75)&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  expect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> equal(</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">Discount</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">getFreeBurgers(</span><span style="color:#005CC5;">[</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(burger)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Hotdog</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">burger</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">cheese</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         })</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 15.50</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Unicorn</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">burger</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">bacon</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         })</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 17.00</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">burger</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">tomatoes</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">cheese</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         })</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 15.15</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Ham</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">burger</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">bacon</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         })</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 16.00</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">burger</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">onions</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         })</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 16.20</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Portabello</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">burger</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">tomatoes</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">         }) </span><span style="color:#6A737D;">// 15.05</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">]</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">46</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">75</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><details class="details custom-block"><summary>Hint 1</summary><p>Use <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-filteri" target="_blank" rel="noreferrer">List.filteri</a> and <a href="https://ocaml.org/manual/5.2/expr.html#ss:expr-operators" target="_blank" rel="noreferrer">mod operator</a>.</p></details><details class="details custom-block"><summary>Hint 2</summary><p>Use <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/ListLabels/#val-fold_left" target="_blank" rel="noreferrer">ListLabels.fold_left</a> or <a href="https://melange.re/v4.0.0/api/re/melange/Stdlib/List/#val-fold_left" target="_blank" rel="noreferrer">List.fold_left</a></p></details><details class="details custom-block"><summary>Solution</summary><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** Buy n burgers, get n/2 burgers free */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFreeBurgers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prices</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">filter_map(item </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">burger</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Burger</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(burger))</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (prices) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[</span><span style="color:#6A737D;">_</span><span style="color:#79B8FF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prices</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      prices</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">sort((x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">compare(x</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> y))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">filteri((index</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> _) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> index </span><span style="color:#FDAEB7;">mod</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">fold_left((</span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(result)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** Buy n burgers, get n/2 burgers free */</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFreeBurgers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prices</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">filter_map(item </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (item) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">burger</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Burger</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(burger))</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">_</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (prices) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[</span><span style="color:#6A737D;">_</span><span style="color:#005CC5;">]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prices</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      prices</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">sort((x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">compare(x</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> y))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">filteri((index</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> _) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> index </span><span style="color:#B31D28;">mod</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">fold_left((</span><span style="color:#B31D28;">+.</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(result)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>A few points about this solution:</p><ul><li><code>getFreeBurger</code> is renamed to <code>getFreeBurgers</code> to reflect the fact that multiple burgers can be free.</li><li>The callback passed to <code>List.fold_left</code> is just the float addition operator (<code>+.</code>).</li><li>The switch expression reappears because it’s needed to detect the cases when the discount can’t be applied (when there are less than two burgers in the order).</li></ul></details><hr><p>View <a href="https://github.com/melange-re/melange-for-react-devs/blob/main/src/discounts-lists/" target="_blank" rel="noreferrer">source code</a> and <a href="https://react-book.melange.re/demo/src/discounts-lists/" target="_blank" rel="noreferrer">demo</a> for this chapter.</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Inside <code>List</code>, there are <code>fold_left</code> and <code>fold_right</code> functions. “Fold left” means to apply the given fold function starting from the first element and work towards the end of the list, while “fold right” starts from the last element and works backwards towards the front of the list. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>A quick fix to allow you to write <code>Array.of_list</code> would be to add a function alias in <code>Array</code>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** Convert list to array */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">of_list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Stdlib</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">of_list</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** Convert list to array */</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">of_list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stdlib</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">of_list</span><span style="color:#B31D28;">;</span></span></code></pre></div> <a href="#fnref2" class="footnote-backref">↩︎</a></li></ol></section>`,100),t=[e];function c(r,y,E,i,d,F){return a(),n("div",null,t)}const h=s(p,[["render",c]]);export{D as __pageData,h as default};
