import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.0e8ae64e.js";const u=JSON.parse('{"title":"Counter","description":"","frontmatter":{},"headers":[],"relativePath":"counter/index.md","filePath":"counter/index.md","lastUpdated":1716395778000}'),e={name:"counter/index.md"},l=o(`<h1 id="counter" tabindex="-1">Counter <a class="header-anchor" href="#counter" aria-label="Permalink to &quot;Counter&quot;">​</a></h1><p>We’re going build the classic frontend starter app, the counter, using <a href="https://reasonml.github.io/reason-react/" target="_blank" rel="noreferrer">ReasonReact</a>. If you’ve already <a href="/installation/">installed the starter project</a>, you can run the project now:</p><ol><li>Go to the root directory of your <a href="https://github.com/melange-re/melange-for-react-devs-template" target="_blank" rel="noreferrer">melange-for-react-devs-template</a> project</li><li>Run <code>npm run watch</code> to start the Melange compiler in watch mode.</li><li>In another terminal window, start the Vite dev server by running <code>npm run serve</code>. As a side effect, it will open a browser tab pointed to <a href="http://localhost:5174/" target="_blank" rel="noreferrer
noopener">http://localhost:5174/</a>.</li></ol><h2 id="the-app-component" tabindex="-1">The <code>App</code> component <a class="header-anchor" href="#the-app-component" aria-label="Permalink to &quot;The \`App\` component&quot;">​</a></h2><p>Open <code>Index.re</code> and you’ll see this:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;welcome to my app&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;welcome to my app&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>This is just about the simplest component you can make, but through it, we can start to see some of the key differences of developing with ReasonReact:</p><ul><li>All components must be inside a module</li><li>The <code>make</code> function renders the component and returns <code>React.element</code></li><li>We must decorate the <code>make</code> function with <code>[@react.component]</code></li><li>In JSX, we must wrap strings with calls to <code>React.string</code></li></ul><p>Let’s go over these differences in more detail.</p><h2 id="components-are-modules" tabindex="-1">Components are modules <a class="header-anchor" href="#components-are-modules" aria-label="Permalink to &quot;Components are modules&quot;">​</a></h2><p>In the example above, a new module named <code>App</code> is defined. OCaml’s <a href="https://cs3110.github.io/textbook/chapters/modules/modules.html" target="_blank" rel="noreferrer">modules</a> are somewhat like JavaScript modules, with one notable difference being that there can be multiples modules inside a single file. For now, you just need to know that all components in ReasonReact are modules, and the name of the component comes from the name of the module.</p><h2 id="the-make-function" tabindex="-1">The <code>make</code> function <a class="header-anchor" href="#the-make-function" aria-label="Permalink to &quot;The \`make\` function&quot;">​</a></h2><p>The <code>make</code> function has the type <code>unit =&gt; React.element</code>, meaning it takes <code>()</code> as the only argument and returns an object of type <code>React.element</code>. You’ll need to decorate <code>make</code> with the <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#attributes" target="_blank" rel="noreferrer">attribute</a><code>@react.component</code>. We’ll go into the details <a href="/todo.html">later</a>, but for now let’s just say that <code>@react.component</code> is there to reduce boilerplate and make our code more readable and easier to maintain.</p><h2 id="wrap-strings-with-react-string" tabindex="-1">Wrap strings with <code>React.string</code> <a class="header-anchor" href="#wrap-strings-with-react-string" aria-label="Permalink to &quot;Wrap strings with \`React.string\`&quot;">​</a></h2><p>Unlike in normal React, we must wrap strings inside function calls to convert them to the <code>React.element</code> type. This is exactly what the <code>React.string</code> function does—if you hover over it, you’ll see that it displays the type <code>string =&gt; React.element</code>.</p><h2 id="using-the-app-component" tabindex="-1">Using the App component <a class="header-anchor" href="#using-the-app-component" aria-label="Permalink to &quot;Using the App component&quot;">​</a></h2><p>A little bit further down, we make use of the <code>App</code> component:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">querySelector(</span><span style="color:#DBEDFF;">&quot;#root&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (node) {</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Console</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">error(</span><span style="color:#DBEDFF;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">createRoot(root)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">render(root</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> /&gt;)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">querySelector(</span><span style="color:#032F62;">&quot;#root&quot;</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (node) {</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Console</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">error(</span><span style="color:#032F62;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">createRoot(root)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">render(root</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> /&gt;)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p><code>React.querySelector(&quot;#root&quot;)</code> returns an <code>option(Dom.element)</code>, meaning that if it doesn’t find the element, it returns <code>None</code>, and if it does find the element, it returns <code>Some(Dom.element)</code>, i.e. the element wrapped in the <code>Some</code> constructor. The <em>switch expression</em><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> allows you to succinctly express:</p><ul><li>If <code>node</code> is <code>None</code>, log an error message</li><li>Otherwise if <code>node</code> is <code>Some(Dom.element)</code>, render the <code>App</code> component to the DOM</li></ul><p>We’ll talk more about <code>option</code> in the <a href="/celsius-converter-option/">Celsius converter chapter</a>.</p><h2 id="the-counter-component" tabindex="-1">The Counter component <a class="header-anchor" href="#the-counter-component" aria-label="Permalink to &quot;The Counter component&quot;">​</a></h2><p>Let’s create a counter component by creating a new file <code>Counter.re</code> with the following contents:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">counter</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setCounter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">useState(</span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#B392F0;">Int</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">to_string(counter))}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">counter</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">setCounter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">useState(</span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#6F42C1;">Int</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">to_string(counter))}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>This is a component with a single <code>useState</code> hook. It should look fairly familiar if you know about <a href="https://react.dev/reference/react/hooks" target="_blank" rel="noreferrer">hooks in React</a>. Note that we didn’t need to manually define a module for <code>Counter</code>, because all source files in OCaml are automatically modules, with the name of the module being the same as the name of the file.</p><p>Now let’s modify <code>App</code> so that it uses our new <code>Counter</code> component:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> /&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> /&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><h2 id="the-pipe-last-operator" tabindex="-1">The pipe last operator <a class="header-anchor" href="#the-pipe-last-operator" aria-label="Permalink to &quot;The pipe last operator&quot;">​</a></h2><p>To display the number of the counter, we wrote <code>{React.string(Int.to_string(counter))}</code>, which converts an integer to a string, and then converts that string to <code>React.element</code>. In OCaml, there’s a way to apply a sequence of operations over some data so that it can be read from left to right:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{counter </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">to_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{counter </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">to_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span></code></pre></div><p>This uses the <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#pipe-last" target="_blank" rel="noreferrer">pipe last operator</a>, which is useful for chaining function calls.</p><h2 id="basic-styling" tabindex="-1">Basic styling <a class="header-anchor" href="#basic-styling" aria-label="Permalink to &quot;Basic styling&quot;">​</a></h2><p>Let’s add a bit of styling to the root element of <code>Counter</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Style</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">make(</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    ~padding</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    ~display</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;flex&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    ~gridGap</span><span style="color:#FDAEB7;">=</span><span style="color:#DBEDFF;">&quot;1em&quot;</span><span style="color:#FDAEB7;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">()</span><span style="color:#FDAEB7;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  )}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; {counter </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">to_string </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{_evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Style</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">make(</span></span>
<span class="line highlighted"><span style="color:#24292E;">    ~padding</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">    ~display</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;flex&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">    ~gridGap</span><span style="color:#B31D28;">=</span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#B31D28;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#005CC5;">()</span><span style="color:#B31D28;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">  )}&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; {counter </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">to_string </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{_evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Unlike in React, the <code>style</code> prop in ReasonReact doesn’t take a generic object, instead it takes an object of type <code>ReactDOM.style</code> that is created by calling <code>ReactDOM.Style.make</code>. This isn’t a sustainable way to style our app—later, we’ll see how to <a href="/todo.html">style using CSS classes</a>.</p><hr><p>Congratulations! You’ve created your first ReasonReact app and component. In future chapters we’ll create more complex and interesting components.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>How to create and run a basic ReasonReact app</li><li>ReasonReact components are also modules</li><li>OCaml has an <code>option</code> type whose value can be either <code>None</code> or <code>Some(_)</code></li><li>The pipe last operator (<code>|&gt;</code>) is an alternate way to invoke functions that enables easy chaining of function calls</li><li>The <code>style</code> prop doesn’t take generic objects</li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> What happens if you try to remove the <code>| None</code> branch of the <code>switch (node)</code> expression in <code>Index.re</code>?</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (node) {</span></span>
<span class="line diff remove"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Console</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">error(</span><span style="color:#DBEDFF;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">createRoot(root)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">render(root</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> /&gt;)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (node) {</span></span>
<span class="line diff remove"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line diff remove"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Console</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">error(</span><span style="color:#032F62;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">createRoot(root)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">render(root</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> /&gt;)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><details class="details custom-block"><summary>Solution</summary><p>Removing the <code>| None</code> branch will result in a compilation error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Error (warning 8 [partial-match]): this pattern-matching is not exhaustive.</span></span>
<span class="line"><span style="color:#e1e4e8;">Here is an example of a case that is not matched:</span></span>
<span class="line"><span style="color:#e1e4e8;">None</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Error (warning 8 [partial-match]): this pattern-matching is not exhaustive.</span></span>
<span class="line"><span style="color:#24292e;">Here is an example of a case that is not matched:</span></span>
<span class="line"><span style="color:#24292e;">None</span></span></code></pre></div><p>Basically, the compiler is telling you to handle the <code>None</code> case if you want to ship your app. This is part of what makes OCaml such a type-safe language.</p></details><p><b>2.</b> What happens if you rename the <code>_evt</code> variable inside the button callback to <code>evt</code>?</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{evt </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> setCounter(v </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#FDAEB7;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{evt </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> setCounter(v </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> v </span><span style="color:#B31D28;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;</span></span></code></pre></div><details class="details custom-block"><summary>Solution</summary><p>Renaming <code>_evt</code> to <code>evt</code> results in a compilation error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Error (warning 27 [unused-var-strict]): unused variable evt.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Error (warning 27 [unused-var-strict]): unused variable evt.</span></span></code></pre></div><p>By default, OCaml wants you to use all the variables you declare, unless they begin with <code>_</code> (underscore).</p></details><p><b>3.</b> Comment out the <code>[@react.component]</code> attribute in <code>Counter.re</code>. What happens?</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//[@react.component]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">counter</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setCounter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">useState(</span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//[@react.component]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">counter</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">setCounter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">useState(</span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span></code></pre></div><details class="details custom-block"><summary>Solution</summary><p>Commenting out <code>[@react.component]</code> in <code>Counter.re</code> will trigger a compilation error in <code>Index.re</code>, at the place where <code>Counter</code> component is used:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File &quot;Index.re&quot;, line 3, characters 19-27:</span></span>
<span class="line"><span style="color:#e1e4e8;">3 |   let make = () =&gt; &lt;Counter /&gt;;</span></span>
<span class="line"><span style="color:#e1e4e8;">                       ^^^^^^^^^^^</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: Unbound value Counter.makeProps</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File &quot;Index.re&quot;, line 3, characters 19-27:</span></span>
<span class="line"><span style="color:#24292e;">3 |   let make = () =&gt; &lt;Counter /&gt;;</span></span>
<span class="line"><span style="color:#24292e;">                       ^^^^^^^^^^^</span></span>
<span class="line"><span style="color:#24292e;">Error: Unbound value Counter.makeProps</span></span></code></pre></div><p>For now, don’t worry about what <code>Counter.makeProps</code> is or where it came from—just remember that you need to put the <code>[@react.component]</code> attribute above your <code>make</code> function if you want your component to be usable in JSX. This is a very common newbie mistake. See the <a href="/todo.html">PPX chapter</a> for more details.</p></details><hr><p>View <a href="https://github.com/melange-re/melange-for-react-devs/blob/main/src/counter/" target="_blank" rel="noreferrer">source code</a> and <a href="https://react-book.melange.re/demo/src/counter/" target="_blank" rel="noreferrer">demo</a> for this chapter.</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Despite the name, don’t confuse OCaml’s <em>switch expressions</em> with JavaScript’s <em>switch statements</em>. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,54),p=[l];function t(c,r,y,E,i,d){return a(),n("div",null,p)}const g=s(e,[["render",t]]);export{u as __pageData,g as default};
