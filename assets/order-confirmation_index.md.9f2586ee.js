import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const B=JSON.parse('{"title":"Order Confirmation","description":"","frontmatter":{},"headers":[],"relativePath":"order-confirmation/index.md","filePath":"order-confirmation/index.md","lastUpdated":1716395778000}'),o={name:"order-confirmation/index.md"},p=l(`<h1 id="order-confirmation" tabindex="-1">Order Confirmation <a class="header-anchor" href="#order-confirmation" aria-label="Permalink to &quot;Order Confirmation&quot;">​</a></h1><p>The famed restauranteur Madame Jellobutter has opened a hot new pop-up restaurant called Emoji Cafe, and you’ve been commissioned to build the order confirmation widget on its website. Feeling adventurous, you decide to build it using Melange.</p><p>Start by creating a new directory <code>src/order-confirmation</code> and give it the same directory structure as we showed you in the previous chapter:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">src/order-confirmation</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ dune</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Index.re</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ Item.re</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">src/order-confirmation</span></span>
<span class="line"><span style="color:#24292e;">├─ dune</span></span>
<span class="line"><span style="color:#24292e;">├─ Index.re</span></span>
<span class="line"><span style="color:#24292e;">├─ Item.re</span></span>
<span class="line"><span style="color:#24292e;">└─ index.html</span></span></code></pre></div><p>The <code>dune</code> file can be copied from any of the existing projects. The <code>index.html</code> file can also be copied over, but remember to update the value of the <code>script</code> element’s <code>src</code> attribute to point to the new location of <code>Index.js</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">../../_build/default/src/order-confirmation/output/src/order-confirmation/Index.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">../../_build/default/src/order-confirmation/output/src/order-confirmation/Index.js</span></span></code></pre></div><p>The <code>.re</code> files can be empty for now.</p><h2 id="variant-type-item-t" tabindex="-1">Variant type <code>Item.t</code> <a class="header-anchor" href="#variant-type-item-t" aria-label="Permalink to &quot;Variant type \`Item.t\`&quot;">​</a></h2><p>For the time being, there are only two items you can order at Emoji Cafe, the sandwich or the burger. In <code>Item.re</code>, add a new type:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>This is a <em>variant type</em><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> named <code>t</code> with two <em>constructors</em>, <code>Sandwich</code> and <code>Burger</code>. In OCaml, it is customary for the primary type of a module to be called <code>t</code>. This convention makes sense because in other modules, this type will be referred to as <code>Item.t</code>.</p><p>The <code>Item</code> module should contain helper functions that return the price and the emoji<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> for a given item. First, add the <code>toPrice</code> function:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (t) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (t) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>If Madame Jellobutter decides to add a hotdog to the menu, you would need to:</p><ul><li>Add a <code>Hotdog</code> constructor to <code>Item.t</code></li><li>Add a <code>| Hotdog</code> branch to the switch expression of <code>Item.toPrice</code></li></ul><p>Your OCaml code would fail to compile if you added <code>Hotdog</code> or removed <code>Sandwich</code> from <code>Item.t</code> without also updating <code>Item.toPrice</code>. This is one of the great advantages of variant types: changing the constructors will force you to change the relevant parts of your code.</p><h2 id="wildcard-in-switch-expressions" tabindex="-1">Wildcard in switch expressions <a class="header-anchor" href="#wildcard-in-switch-expressions" aria-label="Permalink to &quot;Wildcard in switch expressions&quot;">​</a></h2><p>If Madame Jellobutter decides to do a promotion that lowers the price of burgers so that they’re the same price as sandwiches, you could rewrite <code>Item.toPrice</code> to:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (t) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (t) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The underscore (<code>_</code>) here serves as a wildcard matching any constructor. However, this would be a very bad idea! Now changing the constructors in <code>Item.t</code> would not force you to change <code>Item.toPrice</code> accordingly. A much better version would be:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (t) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (t) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Since OCaml’s pattern-matching syntax allows you to combine branches, you can simplify it to:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (t) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (t) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>In any case, you should strive to avoid wildcards. The OCaml Way is to explicitly match all constructors in your switch expressions.</p><h2 id="a-fun-syntax-for-switch" tabindex="-1">A <code>fun</code> syntax for switch <a class="header-anchor" href="#a-fun-syntax-for-switch" aria-label="Permalink to &quot;A \`fun\` syntax for switch&quot;">​</a></h2><p>There’s an alternate, shorter syntax for functions whose entire body is a switch expression. It’s called <code>fun</code>, and we can rewrite <code>Item.toPrice</code> to use it:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fun</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#FDAEB7;">.;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fun</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#B31D28;">.;</span></span></code></pre></div><p>We can also define <code>toEmoji</code> using the <code>fun</code> syntax:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toEmoji</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fun</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🍔</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toEmoji</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fun</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🍔</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Using the <code>fun</code> syntax is completely equivalent to using a switch expression, so it’s up to your personal taste whether you want to use one or the other.</p><h2 id="rendering-an-item" tabindex="-1">Rendering an item <a class="header-anchor" href="#rendering-an-item" aria-label="Permalink to &quot;Rendering an item&quot;">​</a></h2><p>Now we’re ready to define the <code>Item.make</code> function which will render the <code>Item</code> component:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~item</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> toEmoji </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> toPrice </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toFixed(~digits</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~item</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> toEmoji </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> toPrice </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toFixed(~digits</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>The <code>Item.make</code> function has a single labeled argument, <code>~item</code>, of type <code>Item.t</code>. This effectively means the <code>Item</code> component has a single prop named <code>item</code>.</p><p>Note that this renders a single row of a table. We’ll need another component to render a table containing all items in an order.</p><h2 id="order-component" tabindex="-1"><code>Order</code> component <a class="header-anchor" href="#order-component" aria-label="Permalink to &quot;\`Order\` component&quot;">​</a></h2><p>Create a new file <code>src/order-confirmation/Order.re</code> and add the following code:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">reduce(~init</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(acc</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> order) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         acc </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(order)</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {items </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">item </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;) </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Total&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {total </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toFixed(~digits</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">reduce(~init</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(acc</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> order) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         acc </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(order)</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {items </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">item </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;) </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Total&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {total </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toFixed(~digits</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>There’s a lot going on here:</p><ul><li>The primary type of the <code>Order</code> module is <code>array(Item.t)</code>, which is an array of variants.</li><li>The <code>Order.make</code> function has a single labeled argument, <code>~items</code>, of type <code>Order.t</code>. This means the <code>Order</code> component has a single prop named <code>items</code>.</li><li>We sum up the prices of all items using <a href="https://melange.re/v4.0.0/api/re/melange/Js/Array/index.html#val-reduce" target="_blank" rel="noreferrer">Js.Array.reduce</a>, which is the Melange binding to JavaScript’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="noreferrer">Array.reduce method</a>. Note that <code>Js.Array.reduce</code> requires the initial value to be passed in.</li><li>For each order, we render an <code>Item</code> component via <a href="https://melange.re/v4.0.0/api/re/melange/Js/Array/index.html#val-map" target="_blank" rel="noreferrer">Js.Array.map</a>, which is the Melange binding to the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer">Array.map method</a>.</li><li>There’s a call to <code>React.array</code>, which we’ll address in a little bit.</li></ul><h2 id="rendering-an-order-in-index-re" tabindex="-1">Rendering an order in <code>Index.re</code> <a class="header-anchor" href="#rendering-an-order-in-index-re" aria-label="Permalink to &quot;Rendering an order in \`Index.re\`&quot;">​</a></h2><p>Render the <code>Order</code> component inside <code>src/order-confirmation/Index.re</code>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">[|Sandwich</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich|]</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">()</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Order confirmation&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">querySelector(</span><span style="color:#DBEDFF;">&quot;#root&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (node) {</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Console</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">error(</span><span style="color:#DBEDFF;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">createRoot(root)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ReactDOM</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Client</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">render(root</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> /&gt;)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">[|Sandwich</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich|]</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">()</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Order confirmation&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">querySelector(</span><span style="color:#032F62;">&quot;#root&quot;</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (node) {</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Console</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">error(</span><span style="color:#032F62;">&quot;Failed to start React: couldn&#39;t find the #root element&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Some</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">createRoot(root)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ReactDOM</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Client</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">render(root</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> /&gt;)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Run <code>npm run serve</code> inside <code>src/order-confirmation</code> to see your new app in action.</p><h2 id="passing-key-prop-to-items" tabindex="-1">Passing <code>key</code> prop to <code>Item</code>s <a class="header-anchor" href="#passing-key-prop-to-items" aria-label="Permalink to &quot;Passing \`key\` prop to \`Item\`s&quot;">​</a></h2><p>Open your browser’s dev console, where you should see a warning:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Warning: Each child in a list should have a unique &quot;key&quot; prop.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Warning: Each child in a list should have a unique &quot;key&quot; prop.</span></span></code></pre></div><p>Oops, we forgot the set the <code>key</code> prop! One way to fix this is to use <a href="https://melange.re/v4.0.0/api/re/melange/Js/Array/index.html#val-mapi" target="_blank" rel="noreferrer">Js.Array.mapi</a> instead<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> so we can set <code>key</code> based on the index of the element:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">items</span></span>
<span class="line"><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">mapi(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(item</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> index) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#DBEDFF;">&quot;item-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> string_of_int(index)} </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">items</span></span>
<span class="line"><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">mapi(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(item</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> index) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;item-&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> string_of_int(index)} </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array</span></span></code></pre></div><p>The <code>Js.Array.mapi</code> function is also a binding to the <code>Array.map</code> method, but unlike <code>Js.Array.map</code>, it passes the element <em>and the index</em> into the callback. If you hover over it, you’ll see that it has the type signature</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">((&#39;a, int) =&gt; &#39;b, array(&#39;a)) =&gt; array(&#39;b)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">((&#39;a, int) =&gt; &#39;b, array(&#39;a)) =&gt; array(&#39;b)</span></span></code></pre></div><p>When a JavaScript function has optional arguments, it’s common to create <a href="https://melange.re/v4.0.0/communicate-with-javascript.html#approach-1-multiple-external-functions" target="_blank" rel="noreferrer">multiple OCaml functions that bind to it</a>. We’ll discuss this in more detail <a href="/todo.html">later</a>.</p><h2 id="type-transformations-in-jsx" tabindex="-1">Type transformations in JSX <a class="header-anchor" href="#type-transformations-in-jsx" aria-label="Permalink to &quot;Type transformations in JSX&quot;">​</a></h2><p>As mentioned before, there’s a call to <code>React.array</code> after the call to <code>Js.Array.map</code>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{items </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(item </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;) </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{items </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(item </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;) </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array}</span></span></code></pre></div><p>If we leave off the call to <code>React.array</code>, we get this error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File &quot;src/order-confirmation/Order.re&quot;, lines 12, characters 6-12:</span></span>
<span class="line"><span style="color:#e1e4e8;">12 |         {items |&gt; Js.Array.map(item =&gt; &lt;Item item /&gt;)}</span></span>
<span class="line"><span style="color:#e1e4e8;">             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: This expression has type React.element array</span></span>
<span class="line"><span style="color:#e1e4e8;">       but an expression was expected of type React.element</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File &quot;src/order-confirmation/Order.re&quot;, lines 12, characters 6-12:</span></span>
<span class="line"><span style="color:#24292e;">12 |         {items |&gt; Js.Array.map(item =&gt; &lt;Item item /&gt;)}</span></span>
<span class="line"><span style="color:#24292e;">             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="color:#24292e;">Error: This expression has type React.element array</span></span>
<span class="line"><span style="color:#24292e;">       but an expression was expected of type React.element</span></span></code></pre></div><p>The compiler is essentially informing us that the <code>tbody</code> element expects children of type <code>React.element</code><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>, but the call to <code>Js.Array.map</code> returns <code>array(React.element)</code>, which creates a type mismatch. To make the actual type match the expected type, we must add a call to <code>React.array</code> which turns <code>array(React.element)</code> into <code>React.element</code>.</p><p>To better see what types are at play, it might make sense to refactor <code>Order.make</code> like so:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  items</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">reduce(~init</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(acc</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> order) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       acc </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(order)</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">itemRows</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">element</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  items </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">item </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    {itemRows </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Total&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {total </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toFixed(~digits</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  items</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">reduce(~init</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(acc</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> order) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">       acc </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(order)</span></span>
<span class="line"><span style="color:#24292E;">     )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">itemRows</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">element</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span></span>
<span class="line highlighted"><span style="color:#24292E;">  items </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">item </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    {itemRows </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Total&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {total </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toFixed(~digits</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p><code>React.array</code> is a strict type transformation that doesn’t actually change the underlying JavaScript object. For example, try running the <a href="https://melange.re/v4.0.0/playground/?language=Reason&amp;code=bGV0IGVsZW1BcnJheTogYXJyYXkoUmVhY3QuZWxlbWVudCkgPQogICAgW3wiYSIsICJiIiwgImMifF0gfD4gSnMuQXJyYXkubWFwKH5mPXggPT4gUmVhY3Quc3RyaW5nKHgpKTsKSnMubG9nKGVsZW1BcnJheSk7CkpzLmxvZyhSZWFjdC5hcnJheShlbGVtQXJyYXkpKTs%3D&amp;live=off" target="_blank" rel="noreferrer">following code in the playground</a>:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">elemArray</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">element</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">[|</span><span style="color:#DBEDFF;">&quot;a&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;b&quot;</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;c&quot;</span><span style="color:#79B8FF;">|]</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">map(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">x </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(x))</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(elemArray)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">log(</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array(elemArray))</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elemArray</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">element</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">[|</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#005CC5;">|]</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">map(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">x </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(x))</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(elemArray)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">log(</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array(elemArray))</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>If you look at the JavaScript output, you’ll see that the two calls to <code>Js.log</code> get compiled to</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(elemArray);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(elemArray);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(elemArray);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(elemArray);</span></span></code></pre></div><p>The call to <code>React.array</code> in OCaml was erased in the JavaScript output!</p><p>Besides <code>React.array</code>, the other type transformation functions in ReasonReact are <code>React.string</code> (which you’ve already seen), <code>React.int</code>, and <code>React.float</code>. To see why they are necessary, consider this small example in ReactJS:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> answer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Too large&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; {answer} &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> answer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Too large&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt; {answer} &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;);</span></span></code></pre></div><p>The type of <code>answer</code> is either a string or a <code>Number</code>, and for ReactJS, it’s no problem because JavaScript is dynamically typed. However, we would run into a problem if we tried to directly translate this example to OCaml:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">answer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#FDAEB7;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">&quot;Too large&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> value</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; answer &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">answer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#B31D28;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Too large&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> value</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt; answer &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>We could get a compilation error like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">2 |   let answer = value &gt; 100 ? &quot;Too large&quot; : value;</span></span>
<span class="line"><span style="color:#e1e4e8;">                                               ^^^^^</span></span>
<span class="line"><span style="color:#e1e4e8;">Error: This expression has type int but an expression was expected of type</span></span>
<span class="line"><span style="color:#e1e4e8;">         string</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">2 |   let answer = value &gt; 100 ? &quot;Too large&quot; : value;</span></span>
<span class="line"><span style="color:#24292e;">                                               ^^^^^</span></span>
<span class="line"><span style="color:#24292e;">Error: This expression has type int but an expression was expected of type</span></span>
<span class="line"><span style="color:#24292e;">         string</span></span></code></pre></div><p>A value in OCaml can only be one type, regardless of which branch succeeds. Therefore we must use type transformation functions to “unify” the type of <code>answer</code> to <code>React.element</code>:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">answer</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">element</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  value </span><span style="color:#FDAEB7;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Too large&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">int(value)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; answer &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">answer</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">element</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  value </span><span style="color:#B31D28;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Too large&quot;</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">int(value)</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt; answer &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Type transformation functions have another role: They limit the types we can pass into our JSX. For example, there’s no <code>React.object</code> function, so there’s no easy way to put an object directly into ReasonReact JSX. In ReactJS, this is easy to do, and it would cause your component to error out.</p><hr><p>Wunderbar! You’ve got a basic order confirmation component, but it looks… not so great<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>. In the next chapter, we’ll see how ReasonReact components can be styled with plain old CSS.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>By convention, the main type in a module is often named <code>t</code></li><li>A variant is a type that has one or more constructors <ul><li>Adding or removing constructors forces you to change the relevant parts of your code, <em>unless</em> you use wildcards when pattern-matching on a variant</li><li>Using wildcards in your switch expression makes your code less adaptable to change</li></ul></li><li>The <code>fun</code> syntax helps you save a little bit of typing when you have a function whose entire body is a switch expression</li><li>Labeled arguments in a component’s <code>make</code> function are treated as props by ReasonReact.</li><li>The <a href="https://melange.re/v4.0.0/api/re/melange/Js/Array/index.html" target="_blank" rel="noreferrer">Js.Array</a> module contains useful array functions <ul><li>The <code>Js.Array.reduce</code> function is the binding to JavaScript’s <code>Array.reduce</code> method</li><li>The <code>Js.Array.map</code> and <code>Js.Array.mapi</code> functions are both bindings to JavaScript’s <code>Array.map</code> method</li></ul></li><li>The <code>React.array</code> function is needed when you want to convert an array of <code>React.element</code>s to a single <code>React.element</code>, e.g. after a call to <code>Js.Array.map</code></li></ul><h2 id="exercises" tabindex="-1">Exercises <a class="header-anchor" href="#exercises" aria-label="Permalink to &quot;Exercises&quot;">​</a></h2><p><b>1.</b> The <code>Item</code> component is only used inside the <code>Order</code> component and we don’t expect it to be used anywhere else (items rendered in a menu component would look different). Rename it to <code>OrderItem</code> and move it inside the <code>Order</code> module.</p><details class="details custom-block"><summary>Hint</summary><p>Create a submodule inside <code>Order.re</code></p></details><details class="details custom-block"><summary>Solution</summary><p>To move the <code>Item</code> component from the <code>Item</code> module to the <code>Order</code> module, you’ll have to move the <code>Item.make</code> function to a submodule called <code>Order.OrderItem</code>. Then you’ll have to prefix the references to <code>t</code>, <code>toPrice</code>, and <code>toEmoji</code> with <code>Item.</code> since they’re now being referenced outside the <code>Item</code> module. After you’re done, <code>src/order-confirmation/Order.re</code> should look something like this:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FDAEB7;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~item</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toEmoji </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">@</span><span style="color:#B392F0;">react</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (~items</span><span style="color:#FDAEB7;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">t</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    items</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">reduce(~init</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">0</span><span style="color:#FDAEB7;">.,</span><span style="color:#E1E4E8;"> ~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(acc</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> order) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         acc </span><span style="color:#FDAEB7;">+.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toPrice(order)</span></span>
<span class="line"><span style="color:#E1E4E8;">       )</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {items</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Array</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">mapi(~f</span><span style="color:#FDAEB7;">=</span><span style="color:#E1E4E8;">(item</span><span style="color:#FDAEB7;">,</span><span style="color:#E1E4E8;"> index) </span><span style="color:#FDAEB7;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#DBEDFF;">&quot;item-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">++</span><span style="color:#E1E4E8;"> string_of_int(index)} </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          )</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">array}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {</span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string(</span><span style="color:#DBEDFF;">&quot;Total&quot;</span><span style="color:#E1E4E8;">)} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {total </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">tr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tbody</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">table</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">)</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B31D28;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~item</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toEmoji </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">@</span><span style="color:#6F42C1;">react</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">component</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (~items</span><span style="color:#B31D28;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">t</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    items</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">reduce(~init</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">0</span><span style="color:#B31D28;">.,</span><span style="color:#24292E;"> ~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(acc</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> order) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">         acc </span><span style="color:#B31D28;">+.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toPrice(order)</span></span>
<span class="line"><span style="color:#24292E;">       )</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {items</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Array</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">mapi(~f</span><span style="color:#B31D28;">=</span><span style="color:#24292E;">(item</span><span style="color:#B31D28;">,</span><span style="color:#24292E;"> index) </span><span style="color:#B31D28;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;item-&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">++</span><span style="color:#24292E;"> string_of_int(index)} </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">          )</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">array}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {</span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string(</span><span style="color:#032F62;">&quot;Total&quot;</span><span style="color:#24292E;">)} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {total </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">tr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tbody</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">table</span><span style="color:#24292E;">&gt;</span><span style="color:#B31D28;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div></details><p><b>2.</b> Add another constructor to <code>Item.t</code> variant type. Update the <code>Item</code> module’s helper functions to get your program to compile again.</p><details class="details custom-block"><summary>Solution</summary><p>Let’s say you add a <code>HotDog</code> constructor to <code>Item.t</code>; your <code>Item</code> module would look something like this:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fun</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#FDAEB7;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#FDAEB7;">.;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toEmoji</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fun</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Sandwich</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🥪</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Burger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🍔</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Hotdog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;">{</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">|</span><span style="color:#DBEDFF;">🌭</span><span style="color:#FDAEB7;">|</span><span style="color:#79B8FF;">js</span><span style="color:#FDAEB7;">}</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#B31D28;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fun</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#B31D28;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#B31D28;">.;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toEmoji</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fun</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Sandwich</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🥪</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Burger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🍔</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Hotdog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;">{</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">|</span><span style="color:#032F62;">🌭</span><span style="color:#B31D28;">|</span><span style="color:#005CC5;">js</span><span style="color:#B31D28;">}</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Of course, you may have chosen a different price for the hotdog. Or maybe you didn’t add a hotdog at all, and instead added <code>CannedFood</code> (🥫) or <code>PotOfFood</code> (🍲). It’s totally up to you!</p></details><p><b>3.</b> Instead of repeatedly using <code>value |&gt; Js.Float.toFixed(~digits=2) |&gt; React.string</code>, add a helper function <code>Format.currency</code> that does the same thing.</p><details class="details custom-block"><summary>Hint</summary><p>Create a new file named <code>Format.re</code>.</p></details><details class="details custom-block"><summary>Solution</summary><p>In order to create a helper function <code>Format.currency</code>, we must create a new module file called <code>Format.re</code> and add a <code>currency</code> function:</p><div class="language-re vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">re</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">currency</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#FDAEB7;">=&gt;</span><span style="color:#E1E4E8;"> value </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Js</span><span style="color:#FDAEB7;">.</span><span style="color:#B392F0;">Float</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">toFixed(~digits</span><span style="color:#FDAEB7;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">string</span><span style="color:#FDAEB7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">currency</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#B31D28;">=&gt;</span><span style="color:#24292E;"> value </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Js</span><span style="color:#B31D28;">.</span><span style="color:#6F42C1;">Float</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">toFixed(~digits</span><span style="color:#B31D28;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">string</span><span style="color:#B31D28;">;</span></span></code></pre></div><p>Then we can use that function like this:</p><div class="language-reason vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reason</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt; {item </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> toPrice </span><span style="color:#FDAEB7;">|&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Format</span><span style="color:#FDAEB7;">.</span><span style="color:#E1E4E8;">currency} &lt;/</span><span style="color:#85E89D;">td</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt; {item </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> toPrice </span><span style="color:#B31D28;">|&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Format</span><span style="color:#B31D28;">.</span><span style="color:#24292E;">currency} &lt;/</span><span style="color:#22863A;">td</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></details><hr><p>View <a href="https://github.com/melange-re/melange-for-react-devs/blob/main/src/order-confirmation/" target="_blank" rel="noreferrer">source code</a> and <a href="https://react-book.melange.re/demo/src/order-confirmation/" target="_blank" rel="noreferrer">demo</a> for this chapter.</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Variant types have no equivalent in JavaScript, but they are similar to TypeScript’s <a href="https://www.typescriptlang.org/docs/handbook/enums.html#union-enums-and-enum-member-types" target="_blank" rel="noreferrer">union enums</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Recall that the name of this restaurant is Emoji Cafe, so everything from the menu to the order confirmation must use emojis. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Using array indexes to set keys violates <a href="https://react.dev/learn/rendering-lists#rules-of-keys" target="_blank" rel="noreferrer">React’s rules of keys</a>, which states that you shouldn’t generate keys while rendering. We’ll see a better way to do this <a href="/todo.html">later</a>. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>All lowercase elements like <code>div</code>, <code>span</code>, <code>table</code>, etc expect their children to be of type <code>React.element</code>. But React components (with uppercase names) can take children of any type. <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>Madame Jellobutter was passing by and just happened to catch a glimpse of the unstyled component over your shoulder and puked in her mouth a little. <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>`,92),e=[p];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const D=s(o,[["render",t]]);export{B as __pageData,D as default};
